{"version":3,"sources":["store/actions/Clients.js","components/Navigation/History.js","constants/AppConstants.js","store/actions/Auth.js","components/SignOut/index.js","constants/names.js","components/Navigation/index.js","components/Landing/index.js","components/SignUp/index.js","components/SignIn/DemoSignIn.js","components/SignIn/index.js","components/Account/index.js","components/Admin/index.js","constants/roles.js","components/Admin/LogsPage.js","components/Navigation/sidebar.js","components/App/NewClientPage.js","components/App/AddBucketForm.js","components/App/EditClientForm.js","components/App/bucketTable.js","components/App/MonthPicker.js","components/App/Bucket.js","components/App/MonthlySupportHours.js","components/App/DatePickerComms.js","components/App/Communications.js","components/App/ReadOnlyBucket.js","components/App/ArchivePage.js","components/App/OwnerDisplay.js","components/App/SingleClientPage.js","components/App/ClientBlankPage.js","components/App/ClientPage.js","components/App/SingleClientReadOnlyPage.js","components/App/ClientReadOnlyPage.js","components/Error/index.js","components/App/ReportBlankPage.js","components/App/ReportPieChart.js","components/App/SingleReportPage.js","components/App/ReportPage.js","components/App/SummaryPage.js","components/App/OwnerPage.js","components/App/index.js","serviceWorker.js","store/reducers/Auth.js","store/reducers/Clients.js","index.js","constants/routes.js"],"names":["SET_CLIENTDATA","SET_CLIENT_SUMMARY_DATA","FETCH_CLIENT","RESET_CLIENTDATA","getAuthConfig","unencoded_token","content","access_token","Buffer","from","toString","authconfig","config","headers","Authorization","fetchClients","dispatch","getState","a","auth","currentUser","axios","get","BACKEND_URL","response","status","Error","type","clients","data","SIGNED_OUT","history","push","ROUTES","window","location","reload","fetchClient","clientid","console","log","authConfig","responseClient","activeClient","client","fetchClientSummary","numberOfMonths","updateClient","clientData","put","deleteClient","delete","createClient","name","clientdata","post","id","createBucket","newbucketname","deleteBucket","bucket","updateBucket","addCommunication","communications","newcommtext","date","note","deleteCommunication","commid","updateHoursData","hoursid","column","newvalue","deleteMonth","hoursrecord","createMonth","month","getMonth","year","getFullYear","bucketid","createBrowserHistory","process","CONFIG_JSON","Accept","CONFIG_JSON_CONTENT","SET_USERDATA","SIGNED_IN","fetchUsers","users","signIn","email","password","success","message","signOut","signUp","username","updateRole","userid","role","SignOutButton","useDispatch","useHistory","authActions","className","onClick","SITENAME","NavigationAdminAuth","authUser","Navbar","bg","variant","Brand","to","NAMES","Nav","SignOut","NavigationBasicAuth","NavigationNonAuth","Navigation","useSelector","state","undefined","Landing","NonAuth","Auth","INITIAL_STATE","passwordOne","passwordTwo","error","SignUpFormBase","props","onSubmit","event","then","setState","catch","preventDefault","onChange","target","value","this","isInvalid","placeholder","disabled","Component","SignUpLink","SignUpForm","compose","withRouter","SignUpPage","DemoSignInFormBase","DemoSignInForm","connect","SignInFormBase","SignInForm","SignInPage","AccountPage","UserList","promote","useState","confirmModal","setConfirmModal","giveNewRole","newRole","onClickAction","alertType","modal","showCancel","confirmBtnText","confirmBtnBsStyle","title","onConfirm","onCancel","focusCancelBtn","focusConfirmBtn","warning","scope","map","user","key","placement","mouseEnterDelay","mouseLeaveDelay","trigger","overlay","style","cursor","icon","faLevelDownAlt","faLevelUpAlt","AdminPage","adminUsers","allUsers","loading","setLoading","basicUsers","setBasicUsers","useEffect","length","filter","LogsPage","logs","setLogs","page","setPage","perpage","setperpage","totalitemsCount","setTotalitemsCount","fetchLogs","pageNumber","pagesize","parseInt","onClickPerPage","newpagelimit","PageLimitSetter","width","borderBottom","minWidth","category","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","itemClass","linkClass","Sidebar","_isMounted","useRef","filterUserId","setFilterUser","clientList","filterUser","localStorage","getItem","current","Filter","onFilterClicked","setItem","DropdownButton","size","Dropdown","Item","Divider","getSection","section","pathname","substr","AddNewClientLink","Link","activeKey","onSelect","selectedKey","alert","filteredUser","filteringText","ownerid","onClientChanged","NewClientForm","initialValues","validationSchema","Yup","required","values","setSubmitting","clientActions","handleSubmit","isSubmitting","AddBucketForm","clientID","onFinishSubmission","cancelForm","EditClientForm","onDeleteClient","owner","adminusers","support","updatedata","Number","htmlFor","as","display","label","danger","onClickDeleteClient","BucketTable","updateData","onRemoveMonth","readOnly","defaultColumn","Cell","initialValue","row","updateMyData","setValue","e","onBlur","NonEditCell","cell","toFixed","NonEditCellMonth","Date","toLocaleString","EditMultiline","height","columns","React","useMemo","Header","accessor","useTable","currentmonth","hour","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","styleTable","background","color","fontWeight","border","headerGroup","getHeaderGroupProps","getHeaderProps","render","rowColourTouchable","original","touched","getRowProps","cells","getCellProps","faTrash","MonthPicker","handleChangeMonth","displayDate","selected","dateFormat","showMonthYearPicker","Bucket","onArchiveBucket","onAddMonth","handleOnUpdateHoursData","onClickMarkPrepaid","handleUpdateBucketName","newMonth","SetNewMonth","text","updateBucketName","html","stripHtml","spellCheck","faPlus","bucketData","onClickArchive","faArchive","faMoneyBill","prepaid","faCheck","hours","MonthlySupportHours","DatePickerComms","handleChangeDate","Communications","clientComms","editable","newCommText","SetNewCommText","newCommDate","SetNewCommDate","onAddComm","Math","floor","getTime","onDeleteComm","commID","commObject","time","moment","format","ReadOnlyBucket","buttons","invoice","description","in","out","remaining","onDeleteBucket","onUnArchiveBucket","archived","onClickDelete","onClickUnarchive","faTrashRestore","ArchivePage","buckets","onBackToClientPage","restorable","bucketID","faArrowLeft","OwnerDisplay","SingleClientPage","addingNewBucket","setAddingNewBucket","editingClient","setEditingClient","viewingArchive","setViewingArchive","clientNote","setClientNote","Object","keys","constructor","lastupdated","autoCorrect","autoCapitalize","communication","ClientBlankPage","ClientPage","confirmed","setConfirmed","clientIDinurl","split","pop","newClient","noClient","cancelBtnText","Container","fluid","Row","Col","xs","SingleClientReadOnlyPage","onViewClientAdmin","ToAdminPage","ClientReadOnlyPage","PageNotFound","ReportBlankPage","ReportPieChart","chartData","clientName","formattedChartData","hasOwnProperty","x","y","viewBox","overflow","standalone","innerRadius","labelRadius","colorScale","textAnchor","fontSize","SingleReportPage","total","remainingCurrent","hoursarraylength","uuid","marginLeft","ReportPage","noClientSelected","SummaryPage","lastthreemonths","setLastthreemonths","clientSummaryData","currentMonth","endOf","thisMonth","lastMonth","subtract","twomonthsago","SummaryPageInfo","bucketRender","founduser","find","rowSpan","OwnerPage","capitalizeFirstLetter","uncapitalString","charAt","toUpperCase","slice","ownername","useSortBy","getSortByToggleProps","isSorted","isSortedDesc","App","exact","path","component","LandingPage","Boolean","hostname","match","localdata","JSON","parse","initialState","rootReducer","combineReducers","action","admins","currentuser","stringify","removeItem","store","createStore","applyMiddleware","ReduxThunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","LANDING","SIGN_UP","SIGN_IN","CLIENTS","CLIENTADMIN","REPORT","SUMMARY","OWNERS","NEW","ACCOUNT","ADMIN","LOGS"],"mappings":"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","file":"static/js/main.e293d5fb.chunk.js","sourcesContent":["import * as config from '../../constants/AppConstants';\nimport { BACKEND_URL } from '../../constants/AppConstants';\nimport axios from 'axios';\nimport * as ROUTES from '../../constants/routes';\nimport history from '../../components/Navigation/History';\nimport { SIGNED_OUT } from './Auth';\n\nexport const SET_CLIENTDATA = 'SET_CLIENTDATA';\nexport const SET_CLIENT_SUMMARY_DATA = 'SET_CLIENT_SUMMARY_DATA';\nexport const FETCH_CLIENT = 'FETCH_CLIENT';\nexport const RESET_CLIENTDATA = 'RESET_CLIENTDATA';\n\nexport const getAuthConfig = (unencoded_token, content = true) => {\n  const access_token = Buffer.from(`${unencoded_token}:''`, 'utf8').toString('base64');\n  let authconfig = config.CONFIG_JSON_CONTENT;\n  if (content === false) {\n    authconfig = config.CONFIG_JSON;\n  }\n\n  authconfig.headers.Authorization = 'Basic ' + access_token;\n  return authconfig;\n};\n// Here we fetch all high level client data and put that into our redux state.\nexport const fetchClients = () => {\n  return async (dispatch, getState) => {\n    const authconfig = getAuthConfig(getState().auth.currentUser.access_token);\n    // Client fetching is one of the first things we do, so we can check here if we're signed in.\n    try {\n      const response = await axios.get(BACKEND_URL + 'clients', authconfig);\n      if (response.status !== 200) {\n        throw new Error('Didnt get 200 response when fetching clients');\n      }\n\n      dispatch({ type: SET_CLIENTDATA, clients: response.data });\n    } catch (error) {\n      if (error.response.status === 401) {\n        // We aren't authorized, and should be signed out and reset client data.\n        dispatch({ type: RESET_CLIENTDATA });\n        dispatch({ type: SIGNED_OUT });\n        history.push(ROUTES.SIGN_IN);\n        window.location.reload();\n      }\n    }\n  };\n};\n\n// Client Actions.\n// Here we fetch all individual client data from each table and put that into our redux state.\nexport const fetchClient = (clientid) => {\n  console.log('fetching client data all again for client ' + clientid);\n  return async (dispatch, getState) => {\n    const authConfig = getAuthConfig(getState().auth.currentUser.access_token, false);\n    // Collect all data to do with this client.\n    const responseClient = await axios.get(BACKEND_URL + 'clients/' + clientid, authConfig);\n    if (responseClient.status !== 200) {\n      throw new Error('Didnt get 200 response when fetching clients');\n    }\n\n    dispatch({ type: FETCH_CLIENT, activeClient: responseClient.data.client });\n  };\n};\n// Here we fetch all clients, buckets, months data that have activity in the last numberOfMonths.\nexport const fetchClientSummary = (numberOfMonths) => {\n  return async (dispatch, getState) => {\n    const authconfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const response = await axios.get(BACKEND_URL + 'client/summary', authconfig);\n    if (response.status !== 200) {\n      throw new Error('Didnt get 200 response when fetching client summary data');\n    }\n\n    dispatch({ type: SET_CLIENT_SUMMARY_DATA, clients: response.data });\n  };\n};\n\nexport const updateClient = (clientid, clientData) => {\n  return async (dispatch, getState) => {\n    const authConfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const responseClient = await axios.put(BACKEND_URL + 'clients/' + clientid, clientData, authConfig);\n    if (responseClient.status !== 200) {\n      throw new Error('Didnt get 200 response when updating client ');\n    }\n    // Updated in backend. Fetch all client data again.\n    dispatch(fetchClient(clientid));\n  };\n};\n\nexport const deleteClient = (clientid) => {\n  return async (dispatch, getState) => {\n    const authConfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const responseClient = await axios.delete(BACKEND_URL + 'clients/' + clientid, authConfig);\n    if (responseClient.status !== 204) {\n      throw new Error('Didnt get 204 response when deleting client ');\n    }\n    // Updated in backend. Fetch all client data again.\n    history.push(ROUTES.CLIENTADMIN);\n    window.location.reload(); // That's nasty.. proabaly not using history properly here.\n  };\n};\n\nexport const createClient = (name) => {\n  return async (dispatch, getState) => {\n    const authConfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const clientdata = {\n      name: name,\n    };\n    const responseClient = await axios.post(BACKEND_URL + 'clients', clientdata, authConfig);\n    if (responseClient.status !== 201) {\n      throw new Error('Didnt get 201 response when creating client ');\n    }\n\n    history.push(ROUTES.CLIENTADMIN + '/' + responseClient.data.id);\n    window.location.reload(); // That's nasty.. proabaly not using history properly here.\n  };\n};\n\n// Bucket Actions.\nexport const createBucket = (clientid, newbucketname) => {\n  return async (dispatch, getState) => {\n    const authConfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const data = {\n      clientid: clientid,\n      name: newbucketname,\n    };\n    const responseClient = await axios.post(BACKEND_URL + 'buckets', data, authConfig);\n    if (responseClient.status !== 200) {\n      throw new Error('Didnt get 200 response when creating bucket, got: ' + responseClient.status);\n    }\n    // Updated in backend. Fetch all client data again.\n    dispatch(fetchClient(clientid));\n  };\n};\n\nexport const deleteBucket = (bucket) => {\n  return async (dispatch, getState) => {\n    const authConfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const responseClient = await axios.delete(BACKEND_URL + 'buckets/' + bucket.id, authConfig);\n    if (responseClient.status !== 204) {\n      throw new Error('Didnt get 204 response when updating bucket name');\n    }\n\n    dispatch(fetchClient(bucket.clientid));\n  };\n};\n\nexport const updateBucket = (bucket, data) => {\n  return async (dispatch, getState) => {\n    const authConfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const responseClient = await axios.put(BACKEND_URL + 'buckets/' + bucket.id, data, authConfig);\n    if (responseClient.status !== 200) {\n      throw new Error('Didnt get 200 response when updating bucket name');\n    }\n    // Updated in backend. Fetch all client data again.\n    dispatch(fetchClient(bucket.clientid));\n  };\n};\n\nexport const addCommunication = (communications, newcommtext, date) => {\n  return async (dispatch, getState) => {\n    const authConfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const clientid = getState().clients.activeClient.id;\n    const data = {\n      note: newcommtext,\n      date: date,\n      clientid: clientid,\n    };\n    const responseClient = await axios.post(BACKEND_URL + 'communications', data, authConfig);\n    if (responseClient.status !== 201) {\n      throw new Error('Didnt get 201 response when creating communication record');\n    }\n    // Updated in backend. Fetch all client data again.\n    dispatch(fetchClient(clientid));\n  };\n};\n\nexport const deleteCommunication = (communications, commid) => {\n  return async (dispatch, getState) => {\n    const authConfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const clientid = getState().clients.activeClient.id;\n    const responseClient = await axios.delete(BACKEND_URL + 'communications/' + commid, authConfig);\n    if (responseClient.status !== 204) {\n      throw new Error('Didnt get 204 response when deleting communication record');\n    }\n    // Updated in backend. Fetch all client data again.\n    dispatch(fetchClient(clientid));\n  };\n};\n\n// Hours/Months Actions.\nexport const updateHoursData = (hoursid, column, newvalue) => {\n  return async (dispatch, getState) => {\n    const authConfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const clientid = getState().clients.activeClient.id;\n    let data = {};\n    data[column] = newvalue;\n    const responseClient = await axios.put(BACKEND_URL + 'hours/' + hoursid, data, authConfig);\n    if (responseClient.status !== 200) {\n      throw new Error('Didnt get 200 response when updating an hours record');\n    }\n    // Updated in backend. Fetch all client data again.\n    dispatch(fetchClient(clientid));\n  };\n};\n\nexport const deleteMonth = (hoursrecord) => {\n  return async (dispatch, getState) => {\n    const authConfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const clientid = getState().clients.activeClient.id;\n    const responseClient = await axios.delete(BACKEND_URL + 'hours/' + hoursrecord.id, authConfig);\n    if (responseClient.status !== 204) {\n      throw new Error('Didnt get 204 response when updating bucket name');\n    }\n\n    dispatch(fetchClient(clientid));\n  };\n};\n\nexport const createMonth = (bucket, date) => {\n  return async (dispatch, getState) => {\n    const authConfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const data = {\n      month: date.getMonth() + 1,\n      year: date.getFullYear(),\n      bucketid: bucket.id,\n    };\n    const responseClient = await axios.post(BACKEND_URL + 'hours', data, authConfig);\n    if (responseClient.status !== 200) {\n      throw new Error('Didnt get 200 response when creating an hours record');\n    }\n    // Updated in backend. Fetch all client data again.\n    dispatch(fetchClient(bucket.clientid));\n  };\n};\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();\n","export const BACKEND_URL = process.env.REACT_APP_API_URL || '/api/';\nexport const CONFIG_JSON = {\n  headers: {\n    Accept: 'application/json',\n  },\n};\nexport const CONFIG_JSON_CONTENT = {\n  headers: {\n    Accept: 'application/json',\n    'Content-type': 'application/json',\n  },\n};\n","import * as config from '../../constants/AppConstants';\nimport { BACKEND_URL } from '../../constants/AppConstants';\nimport axios from 'axios';\nimport { getAuthConfig } from './Clients';\n\nexport const SET_USERDATA = 'SET_USERDATA';\nexport const SIGNED_IN = 'SIGNED_IN';\nexport const SIGNED_OUT = 'SIGNED_OUT';\nexport const SIGNED_UP = 'SIGNED_UP';\n\n// Here we fetch all user data and put that into our redux state.\nexport const fetchUsers = () => {\n  return async (dispatch, getState) => {\n    const authconfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const response = await axios.get(BACKEND_URL + 'users', authconfig);\n    if (response.status !== 200) {\n      throw new Error('Didnt get 200 response when fetching users');\n    }\n\n    dispatch({ type: SET_USERDATA, users: response.data });\n  };\n};\n// Here we log in, and get back our token if successful.\nexport const signIn = (email, password) => {\n  return async (dispatch) => {\n    const data = {\n      email: email,\n      password: password,\n    };\n    // It is standard practice to send \"plaintext\" passwords over HTTPS.\n    // The passwords are ultimately not plaintext, since the client-server communication is encrypted as per TLS.\n    const response = await axios.post(BACKEND_URL + 'user/login', data, config.CONFIG_JSON);\n    if (response.status !== 200) {\n      throw new Error('Didnt get 200 response when signing in');\n    }\n\n    if (response.data.success === false) {\n      throw new Error(response.data.message);\n    }\n\n    dispatch({ type: SIGNED_IN, data: response.data });\n  };\n};\n\nexport const signOut = () => {\n  return async (dispatch) => {\n    dispatch({ type: SIGNED_OUT });\n  };\n};\n\nexport const signUp = (username, email, password) => {\n  return async (dispatch) => {\n    const data = {\n      username: username,\n      email: email,\n      password: password,\n    };\n    const response = await axios.post(BACKEND_URL + 'user/signup', data, config.CONFIG_JSON);\n    if (response.status !== 200) {\n      throw new Error('Didnt get 200 response when signing in');\n    }\n\n    if (response.data.success === false) {\n      throw new Error(response.data.message);\n    }\n    // Do a sign in after we sign up.\n    dispatch({ type: SIGNED_IN, data: response.data });\n  };\n};\n\nexport const updateRole = (userid, role) => {\n  return async (dispatch, getState) => {\n    const authconfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const data = {\n      userid: userid,\n      role: role,\n    };\n    const response = await axios.post(BACKEND_URL + 'user/updaterole', data, authconfig);\n    if (response.status !== 200) {\n      throw new Error('Didnt get 200 response when updating a user role');\n    }\n    // Get all the user data to update their roles now that one has changed.\n    dispatch(fetchUsers());\n  };\n};\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport * as ROUTES from '../../constants/routes';\nimport * as authActions from '../../store/actions/Auth';\nimport { useDispatch } from 'react-redux';\n\nconst SignOutButton = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const signOut = async () => {\n    await dispatch(authActions.signOut());\n    history.push(ROUTES.SIGN_IN);\n  };\n\n  return (\n    <button className=\"btn btn-warning\" type=\"button\" onClick={signOut}>\n      Sign Out\n    </button>\n  );\n};\n\nexport default (SignOutButton);\n","export const SITENAME = 'Client Hours Logbook';\nexport const NOOWNER = 'NOOWNER';\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport SignOutButton from '../SignOut';\nimport * as ROUTES from '../../constants/routes';\nimport * as NAMES from '../../constants/names';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport { useSelector } from 'react-redux';\n\nconst Navigation = () => {\n  const authUser = useSelector(state => state.auth.currentUser);\n  if (authUser === null || authUser === [] || authUser === undefined) {\n    return <NavigationNonAuth/>;\n  }\n\n  if (authUser.role === 3) {\n    return <NavigationAdminAuth authUser={authUser}/>;\n  }\n\n  if (authUser.role === 1) {\n    return <NavigationBasicAuth authUser={authUser}/>;\n  }\n\n  return <NavigationNonAuth/>;\n};\n\nconst NavigationAdminAuth = ({ authUser }) => {\n  return (\n    <Navbar bg=\"primary\" variant=\"dark\">\n      <Navbar.Brand to=\"/\">{NAMES.SITENAME}</Navbar.Brand>\n      <Nav className=\"mr-auto\">\n        <Link className=\"btn btn-danger ml-1 mr-1\" to={ROUTES.CLIENTADMIN}>\n          Client Admin\n        </Link>\n        <Link className=\"btn btn-danger ml-1 mr-1\" to={ROUTES.LOGS}>\n          Logs\n        </Link>\n        <Link className=\"btn btn-success ml-1 mr-1\" to={ROUTES.CLIENTS}>\n          View Clients\n        </Link>\n        <Link className=\"btn btn-success ml-1 mr-1\" to={ROUTES.REPORT}>\n          Reports\n        </Link>\n        <Link className=\"btn btn-success ml-1 mr-1\" to={ROUTES.SUMMARY}>\n          Client Summary\n        </Link>\n      </Nav>\n      <Navbar.Brand to=\"/\">You are <strong>{authUser.username}</strong></Navbar.Brand>\n      <Link className=\"btn btn-primary\" to={ROUTES.ADMIN}>\n        Admin\n      </Link>\n      <Link className=\"btn btn-primary\" to={ROUTES.ACCOUNT}>\n        Account\n      </Link>\n      <SignOutButton/>\n    </Navbar>\n  );\n};\n\nconst NavigationBasicAuth = ({ authUser }) => (\n  <Navbar bg=\"primary\" variant=\"dark\">\n    <Navbar.Brand to=\"/\">{NAMES.SITENAME}</Navbar.Brand>\n    <Nav className=\"mr-auto\">\n      <Link className=\"btn btn-success ml-1 mr-1\" to={ROUTES.CLIENTS}>\n        Clients\n      </Link>\n      <Link className=\"btn btn-success ml-1 mr-1\" to={ROUTES.REPORT}>\n        Reports\n      </Link>\n      <Link className=\"btn btn-success ml-1 mr-1\" to={ROUTES.SUMMARY}>\n        Client Summary\n      </Link>\n    </Nav>\n    <Link className=\"btn btn-primary\" to={ROUTES.ACCOUNT}>\n      Account\n    </Link>\n    <SignOutButton/>\n  </Navbar>\n);\n\nconst NavigationNonAuth = () => (\n  <Navbar bg=\"primary\" variant=\"dark\">\n    <Navbar.Brand to=\"/\">{NAMES.SITENAME}</Navbar.Brand>\n    <Nav className=\"mr-auto\">\n      <Link className=\"btn btn-primary\" to={ROUTES.LANDING}>\n        Landing\n      </Link>\n      <Link className=\"btn btn-primary\" to={ROUTES.SIGN_IN}>\n        Sign In\n      </Link>\n    </Nav>\n  </Navbar>\n);\nexport default Navigation;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nconst Landing = () => {\n  const authUser = useSelector(state => state.auth.currentUser);\n  if (authUser === null || !authUser) {\n    return <NonAuth/>;\n  }\n\n  if (authUser.role === 3 || authUser.role === 1) {\n    return <Auth authUser={authUser}/>;\n  }\n\n  return <NonAuth/>;\n};\n\nexport default Landing;\n\nconst NonAuth = () => {\n  return (\n    <div className=\"text-center mt-2\">\n      <h4>Please sign in</h4>\n    </div>\n  );\n};\n\nconst Auth = ({ authUser }) => {\n  return (\n    <div className=\"text-center mt-5\">\n      <h1>Hello <strong>{authUser.username}</strong></h1>\n      <h5>Use the links at the top to view client hours information.</h5>\n    </div>\n  );\n};\n","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport * as ROUTES from '../../constants/routes';\nimport { compose } from 'recompose';\nimport { useDispatch } from 'react-redux';\nimport * as authActions from '../../store/actions/Auth';\n\nconst SignUpPage = () => {\n  const dispatch = useDispatch();\n  return (\n    <div className=\"text-center\">\n      <h1 className=\"mt-2\">Sign Up</h1>\n      <SignUpForm dispatch={dispatch}/>\n      <p className=\"mt-3\">\n        Go back to <Link to={ROUTES.SIGN_IN}>Sign In</Link>\n      </p>\n    </div>\n  );\n};\n\nconst INITIAL_STATE = {\n  username: '',\n  email: '',\n  passwordOne: '',\n  passwordTwo: '',\n  error: null,\n};\n\nclass SignUpFormBase extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...INITIAL_STATE };\n  };\n\n  onSubmit = event => {\n    const { username, email, passwordOne } = this.state;\n    this.props.dispatch(authActions.signUp(username, email, passwordOne))\n      .then(authUser => {\n        this.setState({ ...INITIAL_STATE });\n        this.props.history.push(ROUTES.CLIENTS);\n      })\n      .catch(error => {\n        this.setState({ error });\n      });\n    event.preventDefault();\n  };\n\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  render() {\n    const {\n      username,\n      email,\n      passwordOne,\n      passwordTwo,\n      error,\n    } = this.state;\n    const isInvalid =\n      passwordOne !== passwordTwo ||\n      passwordOne === '' ||\n      email === '' ||\n      username === '';\n\n    return (\n      <div className=\"text-center\">\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-group\">\n            <input\n              name=\"username\"\n              value={username}\n              onChange={this.onChange}\n              type=\"text\"\n              placeholder=\"Full Name\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <input\n              name=\"email\"\n              value={email}\n              onChange={this.onChange}\n              type=\"text\"\n              placeholder=\"Email Address\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <input\n              name=\"passwordOne\"\n              value={passwordOne}\n              onChange={this.onChange}\n              type=\"password\"\n              placeholder=\"Password\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <input\n              name=\"passwordTwo\"\n              value={passwordTwo}\n              onChange={this.onChange}\n              type=\"password\"\n              placeholder=\"Confirm Password\"\n            />\n          </div>\n          <button className=\"btn btn-primary\" disabled={isInvalid} type=\"submit\">Sign Up</button>\n          {error && <p>{error.message}</p>}\n        </form>\n      </div>\n    );\n  }\n}\n\nconst SignUpLink = () => (\n  <p>\n    Don't have an account? <Link to={ROUTES.SIGN_UP}>Sign Up</Link>\n  </p>\n);\n\nconst DemoSignInLink = () => (\n  <p>\n    <Link to={ROUTES.SIGN_UP}>Sign in to Demo Admin Account</Link>\n  </p>\n);\n\nconst SignUpForm = compose(\n  withRouter,\n)(SignUpFormBase);\n\nexport default SignUpPage;\nexport {SignUpForm, SignUpLink, DemoSignInLink};\n","import React, {Component} from 'react';\nimport {withRouter} from 'react-router-dom';\nimport {compose} from 'recompose';\nimport * as ROUTES from '../../constants/routes';\nimport {connect} from 'react-redux';\nimport * as authActions from '../../store/actions/Auth';\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        signIn: (email, password) => dispatch(authActions.signIn(email, password)),\n    };\n};\n\nclass DemoSignInFormBase extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    onSubmit = event => {\n        this.props.signIn(process.env.REACT_APP_ADMIN_USERNAME, process.env.REACT_APP_ADMIN_USERNAME).then(() => {\n            this.props.history.push(ROUTES.LANDING);\n        }).catch(error => {\n            this.setState({error});\n        });\n        event.preventDefault();\n    };\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.onSubmit}>\n                    <button className=\"btn btn-primary\" type=\"submit\">\n                        Use Demo Admin Account\n                    </button>\n                </form>\n                OR:\n            </div>\n        );\n    }\n}\n\nconst DemoSignInForm = compose(withRouter)(connect(null, mapDispatchToProps)(DemoSignInFormBase));\nexport {DemoSignInForm};\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\nimport { SignUpLink } from '../SignUp';\nimport { DemoSignInForm } from './DemoSignIn';\nimport * as ROUTES from '../../constants/routes';\nimport Landing from '../Landing';\nimport { connect } from 'react-redux';\nimport * as authActions from '../../store/actions/Auth';\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signIn: (email, password) => dispatch(authActions.signIn(email, password)),\n  };\n};\n\nconst SignInPage = props => (\n  <div className=\"text-center mt-3\">\n    {process.env.REACT_APP_ENVIRONMENT === 'demo' && <DemoSignInForm/>}\n    {console.log(process.env.REACT_APP_ENVIRONMENT)}\n    <Landing/>\n    <SignInForm/>\n    <SignUpLink/>\n\n  </div>\n);\nconst INITIAL_STATE = {\n  email: '',\n  password: '',\n  error: null,\n};\n\nclass SignInFormBase extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...INITIAL_STATE };\n  }\n\n  onSubmit = event => {\n    const { email, password } = this.state;\n    this.props.signIn(email, password).then(() => {\n      this.setState({ ...INITIAL_STATE });\n      this.props.history.push(ROUTES.LANDING);\n      //window.location.reload(); // Ugly.. but means we grab and keep our auth state once each time.\n    })\n      .catch(error => {\n        this.setState({ error });\n      });\n    event.preventDefault();\n  };\n\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  render() {\n    const { email, password, error } = this.state;\n    const isInvalid = password === '' || email === '';\n    return (\n      <div className=\"mx-auto w-25 shadow p-3 mb-5 bg-white rounded\">\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-group\">\n            <input\n              name=\"email\"\n              value={email}\n              onChange={this.onChange}\n              type=\"text\"\n              placeholder=\"Email Address\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <input\n              name=\"password\"\n              value={password}\n              onChange={this.onChange}\n              type=\"password\"\n              placeholder=\"Password\"\n            />\n          </div>\n          <button className=\"btn btn-primary\" disabled={isInvalid} type=\"submit\">\n            Sign In\n          </button>\n          {error && <p>{error.message}</p>}\n        </form>\n      </div>\n    );\n  }\n}\n\nconst SignInForm = compose(withRouter)(connect(null, mapDispatchToProps)(SignInFormBase));\nexport default SignInPage;\nexport {SignInForm};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nconst AccountPage = () => {\n  const authUser = useSelector(state => state.auth.currentUser);\n  const role = authUser.role === 3 ? 'Admin' : 'Basic';\n  return (\n    <div>\n      <div className=\"text-center\">\n        <h3 className=\"mt-3\">Account: {authUser.email}</h3>\n        <hr/>\n        <h3>Username: {authUser.username}</h3>\n        <hr/>\n        <h3>Role: {role}</h3>\n      </div>\n    </div>\n  );\n};\n\nexport default (AccountPage);\n","import React, { useEffect, useState } from 'react';\nimport * as ROLES from '../../constants/roles';\nimport Tooltip from 'rc-tooltip/es';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLevelDownAlt, faLevelUpAlt } from '@fortawesome/free-solid-svg-icons';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as authActions from '../../store/actions/Auth';\n\nconst AdminPage = () => {\n  const dispatch = useDispatch();\n  const adminUsers = useSelector(state => state.auth.adminUsers);\n  const allUsers = useSelector(state => state.auth.users);\n  const [loading, setLoading] = useState(false);\n  const [basicUsers, setBasicUsers] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    if (allUsers.length === 0) {\n      dispatch(authActions.fetchUsers());\n    }\n\n    setBasicUsers(allUsers.filter((user) => user.role !== 3));\n    setLoading(false);\n  }, [dispatch, allUsers]);\n\n  return (\n    <div className=\"col-md-10 text-center\">\n      <h1>Admin Users (Read and write access)</h1>\n      {loading && <div>Loading ...</div>}\n      <UserList users={adminUsers} promote={false}/>\n      <h1>Basic Users (Read only access)</h1>\n      <UserList users={basicUsers} promote={true}/>\n    </div>\n  );\n};\n\nconst UserList = ({ users, promote }) => {\n  const dispatch = useDispatch();\n  const [confirmModal, setConfirmModal] = useState(null);\n\n  const giveNewRole = async (id, newRole) => {\n    await dispatch(authActions.updateRole(id, newRole));\n    console.log('Changed role of user with id: ' + id + ' to have role ' + newRole);\n    setConfirmModal(null);\n  };\n\n  const onClickAction = (id, newRole, alertType) => {\n    if (alertType === 'giveAdmin') {\n      const modal = (\n        <SweetAlert\n          success\n          showCancel\n          confirmBtnText=\"Yes\"\n          confirmBtnBsStyle=\"success\"\n          title=\"Are you sure?\"\n          onConfirm={() => giveNewRole(id, newRole)}\n          onCancel={() => setConfirmModal(null)}\n          focusCancelBtn={false}\n          focusConfirmBtn={false}\n        >\n          This will make this user an admin.\n        </SweetAlert>\n      );\n      setConfirmModal(modal);\n    } else {\n      const modal = (\n        <SweetAlert\n          warning\n          showCancel\n          confirmBtnText=\"Yes\"\n          confirmBtnBsStyle=\"warning\"\n          title=\"Are you sure?\"\n          onConfirm={() => giveNewRole(id, newRole)}\n          onCancel={() => setConfirmModal(null)}\n          focusCancelBtn={false}\n          focusConfirmBtn={false}\n        >\n          This will remove this user as an admin.\n        </SweetAlert>\n      );\n      setConfirmModal(modal);\n    }\n  };\n\n  if (!users) {\n    return (\n      <h5>No users in this category</h5>\n    );\n  }\n\n  return (\n    <div>\n      {confirmModal}\n      <table className=\"table\">\n        <thead className=\"theat-dark\">\n        <tr>\n          <th scope=\"col\">UserId</th>\n          <th scope=\"col\">Email</th>\n          <th scope=\"col\">Username</th>\n          <th scope=\"col\">Action</th>\n        </tr>\n        </thead>\n        <tbody>\n        {users.map(user => (\n          <tr key={user.id}>\n            <td>{user.id}</td>\n            <td>{user.email}</td>\n            <td>{user.username}</td>\n            {!promote && (\n              <td>\n                <Tooltip\n                  placement=\"right\"\n                  mouseEnterDelay={0.5}\n                  mouseLeaveDelay={0.1}\n                  trigger=\"hover\"\n                  overlay={<div>Demote</div>}\n                >\n                  <button onClick={() => onClickAction(user.id, ROLES.BASIC, 'removeAdmin')}\n                          className=\"btn btn-secondary m-1\" type=\"submit\">\n                    <FontAwesomeIcon style={{ cursor: 'pointer' }} icon={faLevelDownAlt}/>\n                  </button>\n                </Tooltip>\n              </td>\n            )}\n            {promote &&\n            <td>\n              <Tooltip\n                placement=\"right\"\n                mouseEnterDelay={0.5}\n                mouseLeaveDelay={0.1}\n                trigger=\"hover\"\n                overlay={<div>Promote</div>}\n              >\n                <button onClick={() => onClickAction(user.id, ROLES.ADMIN, 'giveAdmin')}\n                        className=\"btn btn-secondary m-1\" type=\"submit\">\n                  <FontAwesomeIcon style={{ cursor: 'pointer' }} icon={faLevelUpAlt}/>\n                </button>\n              </Tooltip>\n            </td>\n            }\n          </tr>\n        ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default (AdminPage);\n","export const ADMIN = 'ADMIN';\nexport const BASIC = 'BASIC';\n","import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport axios from 'axios';\nimport { BACKEND_URL } from '../../constants/AppConstants';\nimport { getAuthConfig } from '../../store/actions/Clients';\nimport Pagination from \"react-js-pagination\";\nconst DEFAULT_PAGE_SIZE = 20;\n\nconst LogsPage = () => {\n  const access_token = useSelector((state => state.auth.currentUser.access_token));\n  const [logs, setLogs] = useState([]);\n  const [page, setPage] = useState(1);\n  const [perpage, setperpage] = useState(DEFAULT_PAGE_SIZE);\n  const [totalitemsCount, setTotalitemsCount] = useState(20);\n\n  const fetchLogs = async (pageNumber, pagesize = perpage) => {\n    if (pageNumber === undefined) {\n      return;\n    }\n    const authconfig = getAuthConfig(access_token);\n    const response = await axios.get(BACKEND_URL + 'logs?sort=-log_time&page=' + pageNumber + '&per-page=' + pagesize, authconfig);\n    if (response.status !== 200) {\n      throw new Error('Didnt get 200 response when fetching users');\n    }\n    setTotalitemsCount(parseInt(response.headers['x-pagination-total-count']));\n    setperpage(parseInt(response.headers['x-pagination-per-page']));\n    setPage(pageNumber);\n    setLogs(response.data);\n  };\n\n  const onClickPerPage = (newpagelimit) => {\n    if (newpagelimit > 0 && newpagelimit <= 1000) {\n      fetchLogs(page, newpagelimit);\n    }\n  }\n\n  const PageLimitSetter = () => {\n    // Make the currently selected page size shown as active with a success button.\n    return (\n      <div>\n        <h5>Logs per page</h5>\n        <button onClick={() => onClickPerPage(DEFAULT_PAGE_SIZE)}\n                className={\"btn m-1 \" + (perpage === DEFAULT_PAGE_SIZE ? 'btn-success' : 'btn-secondary')}\n                type=\"submit\">\n          {DEFAULT_PAGE_SIZE}\n        </button>\n        <button onClick={() => onClickPerPage(50)}\n                className={\"btn m-1 \" + (perpage === 50 ? 'btn-success' : 'btn-secondary')}\n                type=\"submit\">\n          50\n        </button>\n        <button onClick={() => onClickPerPage(100)}\n                className={\"btn m-1 \" + (perpage === 100 ? 'btn-success' : 'btn-secondary')}\n                type=\"submit\">\n          100\n        </button>\n        <button onClick={() => onClickPerPage(1000)}\n                className={\"btn m-1 \" + (perpage === 1000 ? 'btn-success' : 'btn-secondary')}\n                type=\"submit\">\n          1000\n        </button>\n      </div>\n    );\n  }\n\n  useEffect(() => {\n    // Going to fetch the logs on each render of this page. No dispatch or redux state updated.\n    fetchLogs(1, DEFAULT_PAGE_SIZE).then(() => console.log('fetched logs'));\n  }, []); //eslint-disable-line\n\n  if (logs.length === 0) {\n    return (\n      <div className=\"col-md-10 text-center\">\n        <h1>Loading logs...</h1>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"text-center\">\n      <h1>Logs</h1>\n      <table style={{ width: '95%' }}>\n        <thead>\n        <tr style={{ borderBottom: '1px solid black' }}>\n          <th style={{ minWidth: '250px' }}>Date</th>\n          <th>Category</th>\n          <th>Message</th>\n        </tr>\n        </thead>\n        <tbody>\n        {logs.map(log => {\n          return (\n            <tr className=\"text-left\" key={log.id}>\n              <td className=\"logtablecell\">{log.date}</td>\n              <td className=\"logtablecell\">{log.category}</td>\n              <td className=\"logtablecell\">{log.message}</td>\n            </tr>\n          );\n        })}\n        </tbody>\n      </table>\n      <div>\n        <Pagination\n          activePage={page}\n          itemsCountPerPage={perpage}\n          totalItemsCount={totalitemsCount}\n          pageRangeDisplayed={5}\n          onChange={fetchLogs}\n          itemClass=\"page-item\"\n          linkClass=\"page-link\"\n        />\n        <PageLimitSetter/>\n      </div>\n    </div>\n  );\n};\n\nexport default (LogsPage);\n","import React, {useEffect, useRef, useState} from \"react\";\nimport {Dropdown, DropdownButton, Nav} from \"react-bootstrap\";\nimport {useHistory} from \"react-router-dom\";\nimport * as ROUTES from \"../../constants/routes\";\nimport {NOOWNER} from \"../../constants/names\";\nimport {useSelector} from 'react-redux';\n\nconst Sidebar = () => {\n  const _isMounted = useRef(true); // Initial value _isMounted = true\n  const [filterUserId, setFilterUser] = useState();\n  const clientList = useSelector(state => state.clients.clients);\n  const adminUsers = useSelector(state => state.auth.adminUsers);\n\n  // Need this to do a ComponentWillUnmount and cleanup memory leaks.\n  useEffect(() => {\n    let filterUser = localStorage.getItem('filterUserId');\n    if (filterUser !== undefined && filterUser !== null && filterUser !== '') {\n      // Make sure the id is an int.\n      if (filterUser !== NOOWNER) {\n        filterUser = parseInt(filterUser);\n      }\n      setFilterUser(filterUser);\n    }\n    // ComponentWillUnmount in Class Component\n    return () => {\n      _isMounted.current = false;\n    }\n  }, []);\n\n  const Filter = () => {\n    const onFilterClicked = (id) => {\n      localStorage.setItem('filterUserId', id);\n      setFilterUser(id);\n    }\n    return (\n      <DropdownButton id=\"dropdown-basic-button\" variant=\"secondary\" className=\"m-3 text-center\" title=\"Filter by owner\"\n                      size=\"sm\">\n        <Dropdown.Item onClick={() => onFilterClicked('')}>\n          Reset\n        </Dropdown.Item>\n        <Dropdown.Divider/>\n        {adminUsers && adminUsers.map(user => (\n          <Dropdown.Item key={user.id} onClick={() => onFilterClicked(user.id)}>\n            {user.username}\n          </Dropdown.Item>\n        ))}\n        <Dropdown.Item onClick={() => onFilterClicked(NOOWNER)}>\n          No owner\n        </Dropdown.Item>\n      </DropdownButton>\n    );\n  };\n\n  const filteringText = () => {\n    if (filterUserId === NOOWNER) {\n      return (\n        <div className=\"text-center\">\n          <em>Clients with no owner</em>\n        </div>\n      );\n    }\n    if (adminUsers.length === 0) {\n      return true;\n    }\n    const filteredUser = adminUsers.filter(user => user.id === filterUserId)[0];\n    if (!filteredUser) {\n      return true;\n    }\n    return (\n      <div className=\"text-center\">\n        <em>Filtering by {filteredUser.username}</em>\n      </div>\n    );\n  }\n\n  const history = useHistory();\n\n  // This function tells us which 'section' we're in, admin, viewing, or reports.\n  const getSection = () => {\n    let section = ROUTES.CLIENTS;\n    if (window.location.pathname.substr(0, ROUTES.REPORT.length) === ROUTES.REPORT) {\n      section = ROUTES.REPORT;\n    }\n    if (window.location.pathname.substr(0, ROUTES.CLIENTADMIN.length) === ROUTES.CLIENTADMIN) {\n      section = ROUTES.CLIENTADMIN;\n    }\n    return section;\n  }\n\n  const onClientChanged = (client) => {\n    history.push(getSection() + \"/\" + client.id);\n  }\n\n  const onViewAllClientsAndOwners = () => {\n    history.push(ROUTES.OWNERS);\n  }\n  const onAddNewClientClicked = () => {\n    history.push(ROUTES.CLIENTADMIN + \"/new\");\n  }\n  const AddNewClientLink = () => {\n    return (\n      <Nav.Item>\n        <Nav.Link onClick={() => onAddNewClientClicked()}>\n          Add new client\n        </Nav.Link>\n      </Nav.Item>\n    );\n  }\n  return (\n    <>\n      <Nav className=\"col-md-12 d-none d-md-block bg-light sidebar\"\n           activeKey=\"/home\"\n           onSelect={selectedKey => alert(`selected ${selectedKey}`)}\n      >\n        <Filter/>\n        {filterUserId && filteringText()}\n        <hr/>\n        <div className=\"sidebar-sticky\"/>\n        {clientList && clientList.filter(client => {\n          if (filterUserId === NOOWNER) {\n            // Return clients that don't have an owner set.\n            return client.ownerid === null || client.ownerid === undefined;\n          }\n          if (filterUserId) {\n            return client.ownerid === filterUserId;\n          }\n          return true;\n        }).map(client => {\n          return (\n            <Nav.Item key={client.id}>\n              <Nav.Link onClick={() => onClientChanged(client)}>{client.name}</Nav.Link>\n            </Nav.Item>\n          );\n        })}\n        <Nav.Item>\n          <Nav.Link onClick={() => onViewAllClientsAndOwners()}>All clients and owners</Nav.Link>\n        </Nav.Item>\n        {getSection() === ROUTES.CLIENTADMIN && <AddNewClientLink/>}\n      </Nav>\n    </>\n  );\n};\nexport default Sidebar;\n","import React from 'react';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport * as clientActions from '../../store/actions/Clients';\n\nconst NewClientForm = () => {\n  const dispatch = useDispatch();\n  return (\n\n\n\n<div className=\"col-8\">\n      <h1>New client</h1>\n      <Formik\n        initialValues={{ name: '' }}\n        validationSchema={Yup.object({\n          name: Yup.string().required('Required to enter a name'),\n        })}\n        onSubmit={async (values, { setSubmitting }) => {\n          setSubmitting(true);\n          await dispatch(clientActions.createClient(values.name));\n          setSubmitting(false);\n          console.log('successfully created client ' + values.name);\n        }}\n      >\n        {props => {\n          const {\n            handleSubmit,\n            isSubmitting,\n          } = props;\n          return (\n            <Form className=\"col-12 text-center container\" onSubmit={handleSubmit}>\n              <div className=\"form-group\">\n                <Field\n                  className=\"form-control col-12 m-1\"\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Name of client\"\n                />\n                <ErrorMessage name=\"name\"/>\n              </div>\n              <button\n                className=\"btn btn-primary m-1\"\n                type=\"submit\"\n                disabled={isSubmitting}\n              >\n                Submit\n              </button>\n            </Form>\n          );\n        }}\n      </Formik>\n    </div>\n  );\n};\n\nexport default (NewClientForm);\n","import React from 'react';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport * as clientActions from '../../store/actions/Clients';\n\nconst AddBucketForm = ({ clientID, onFinishSubmission, cancelForm }) => {\n  const dispatch = useDispatch();\n  return (\n\n\n\n<div className=\"col-10\">\n      <h1>New bucket</h1>\n      <Formik\n        initialValues={{ name: '' }}\n        validationSchema={Yup.object({\n          name: Yup.string().required('Required to enter a name'),\n        })}\n        onSubmit={async (values, { setSubmitting }) => {\n          setSubmitting(true);\n          await dispatch(clientActions.createBucket(clientID, values.name));\n          setSubmitting(false);\n          onFinishSubmission();\n        }}\n      >\n        {props => {\n          const {\n            handleSubmit,\n            isSubmitting,\n          } = props;\n          return (\n            <Form className=\"col-10 text-center container\" onSubmit={handleSubmit}>\n              <div className=\"form-group\">\n                <Field\n                  className=\"form-control col-12 m-1\"\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Name of bucket\"\n                />\n                <ErrorMessage name=\"name\"/>\n              </div>\n              <button\n                className=\"btn btn-primary m-1\"\n                type=\"submit\"\n                disabled={isSubmitting}\n              >\n                Submit\n              </button>\n            </Form>\n          );\n        }}\n      </Formik>\n      <button onClick={onFinishSubmission} className=\"btn btn-danger m-1\" type=\"submit\">Cancel</button>\n    </div>\n  );\n};\n\nexport default AddBucketForm;\n","import React, { useState } from 'react';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as clientActions from '../../store/actions/Clients';\n\nconst EditClientForm = ({ clientData, onFinishSubmission, onDeleteClient, owner }) => {\n  const [confirmModal, setConfirmModal] = useState(null);\n  const adminusers = useSelector(state => state.auth.adminUsers);\n  const dispatch = useDispatch();\n\n  const onClickDeleteClient = () => {\n    const modal = (\n      <SweetAlert\n        danger\n        showCancel\n        confirmBtnText=\"Yes, delete it!\"\n        confirmBtnBsStyle=\"danger\"\n        title=\"Are you sure?\"\n        onConfirm={() => onDeleteClient()}\n        onCancel={() => setConfirmModal(null)}\n        focusCancelBtn={false}\n        focusConfirmBtn={false}\n      >\n        You will not be able to recover any data for this client!\n      </SweetAlert>\n    );\n    setConfirmModal(modal);\n  };\n\n  return (\n\n\n\n<div className=\"col-10\">\n      <h1>Edit Client {clientData.name}</h1>\n      {confirmModal}\n      <Formik\n        initialValues={{ name: clientData.name, support: clientData.support, owner: owner }}\n        validationSchema={Yup.object({\n          name: Yup.string().required('Required to enter a name'),\n        })}\n        onSubmit={(values, { setSubmitting }) => {\n          setSubmitting(true);\n          const updatedata = {\n            name: values.name,\n            support: values.support,\n          };\n          if (typeof values.owner === 'string' && values.owner !== '') {\n            if (values.owner !== '0') {\n              updatedata['ownerid'] = Number(values.owner);\n            } else {\n              updatedata['ownerid'] = null;\n            }\n          }\n\n          dispatch(clientActions.updateClient(clientData.id, updatedata));\n          setSubmitting(false);\n          onFinishSubmission();\n        }}\n      >\n        {props => {\n          const {\n            handleSubmit,\n            isSubmitting,\n          } = props;\n          return (\n            <Form className=\"col-10 text-center container\" onSubmit={handleSubmit}>\n              <div className=\"form-group row\">\n                <label htmlFor=\"name\" className=\"m-1 mt-2\">Client Name</label>\n                <Field\n                  className=\"form-control col-8 m-1\"\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder={clientData.name}\n                />\n                <ErrorMessage name=\"name\"/>\n              </div>\n              <div className=\"form-group row\">\n                <label htmlFor=\"support\" className=\"m-1 mt-2\">Support hours per month</label>\n                <Field\n                  className=\"form-control col-8 m-1\"\n                  type=\"text\"\n                  name=\"support\"\n                  placeholder={clientData.support}\n                />\n              </div>\n              <div className=\"form-group row\">\n                <label htmlFor=\"owner\" className=\"m-1 mt-2\">Set Owner</label>\n                <Field as=\"select\"\n                       name=\"owner\"\n                       style={{ display: 'block' }}\n                >\n                  <option value=\"\" label=\"Select an owner\"/>\n                  {adminusers && adminusers.map(user => <option key={user.id} value={user.id} label={user.username}/>)}\n                  <option value={0} label=\"No owner\"/>\n                </Field>\n              </div>\n              <button\n                className=\"btn btn-primary m-1\"\n                type=\"submit\"\n                disabled={isSubmitting}\n              >\n                Submit\n              </button>\n            </Form>\n          );\n        }}\n      </Formik>\n      <button onClick={onFinishSubmission} className=\"btn btn-secondary m-1\" type=\"submit\">Cancel</button>\n      <button onClick={() => onClickDeleteClient()} className=\"btn btn-danger m-1\" type=\"submit\">Delete client</button>\n    </div>\n  );\n};\n\nexport default EditClientForm;\n","import React, { useEffect, useState } from 'react';\nimport { useTable } from 'react-table';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nconst BucketTable = ({ data, updateData, onRemoveMonth, readOnly }) => {\n  // Create an editable cell renderer\n  const EditableCell = ({\n                          value: initialValue,\n                          row: { values },\n                          column: { id },\n                          updateMyData,\n                        }) => {\n    if (initialValue === null) {\n      initialValue = '';\n    }\n\n    // We need to keep and update the state of the cell normally\n    const [value, setValue] = useState(initialValue);\n    const onChange = e => {\n      setValue(e.target.value);\n    };\n\n    // We'll only update the external data when the input is blurred.\n    const onBlur = () => updateMyData(values, id, value);\n\n    // If the initialValue is changed external, sync it up with our state.\n    useEffect(() => {\n      setValue(initialValue);\n    }, [initialValue]);\n    let width = '150px';\n    if (id === 'in' || id === 'out') {\n      width = '60px';\n    }\n\n    return <input value={value} onChange={onChange} onBlur={onBlur} style={{ width: width }}/>;\n  };\n\n  // Create a non editable cell renderer\n  const NonEditableCell = ({ cell }) => {\n    if (cell.value !== 0 && !cell.value) {\n      return null;\n    }\n\n    if (cell.column.id === 'remaining' && cell.value % 1 !== 0) {\n      // Make sure the remaining column only displays values to 2 decimal places maximum.\n      return cell.value.toFixed(2);\n    }\n\n    return cell.value;\n  };\n\n  // When rendering months, we convert the integer to the human readable month name.\n  const NonEditableCellMonth = ({ cell }) => {\n    if (!cell.value) {\n      return null;\n    }\n\n    return new Date(2020, cell.value - 1, 15).toLocaleString('default', { month: 'long' });\n  };\n\n  // Create an editable cell renderer\n  const EditMultiline = ({\n                           value: initialValue,\n                           row: { values },\n                           column: { id },\n                           updateMyData,\n                         }) => {\n    // We need to keep and update the state of the cell normally\n    if (initialValue === null) {\n      initialValue = '';\n    }\n\n    const [value, setValue] = useState(initialValue);\n    const onChange = e => {\n      setValue(e.target.value);\n    };\n\n    // We'll only update the external data when the input is blurred\n    const onBlur = () => updateMyData(values, id, value);\n\n    // If the initialValue is changed external, sync it up with our state\n    useEffect(() => {\n      setValue(initialValue);\n    }, [initialValue]);\n    return <textarea\n      className=\"form-control\"\n      onChange={onChange}\n      onBlur={onBlur}\n      value={value}\n      placeholder=\"Write a description\"\n      style={{ height: '2.5rem' }}\n    />;\n  };\n\n  // Set our editable cell renderer as the default Cell renderer\n  const defaultColumn = {\n    Cell: EditableCell,\n    NonEditCell: NonEditableCell,\n    NonEditCellMonth: NonEditableCellMonth,\n    EditMultiline: EditMultiline,\n  };\n\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n  const updateMyData = (values, column, value) => {\n    const currentmonth = data.filter(hour => (hour.month === values.month && hour.year === values.year))[0];\n    if (currentmonth === undefined || !currentmonth) {\n      console.log('trying to update a month that could not be found! - this should not be possible!');\n      return;\n    }\n\n    if (currentmonth[column] === value || (value === '' && currentmonth[column] === null)) {\n      console.log('no need to update, nothing changed');\n      return;\n    }\n\n    updateData(currentmonth.id, column, value);\n  };\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Month',\n        accessor: 'month',\n      },\n      {\n        Header: 'Year',\n        accessor: 'year',\n      },\n      {\n        Header: 'Invoice',\n        accessor: 'invoice',\n      },\n      {\n        Header: 'Description',\n        accessor: 'description',\n      },\n      {\n        Header: 'In',\n        accessor: 'in',\n      },\n      {\n        Header: 'Out',\n        accessor: 'out',\n      },\n      {\n        Header: 'Balance',\n        accessor: 'remaining',\n      },\n    ],\n    []\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    updateMyData,\n  });\n  const styleTable = {\n    borderBottom: 'solid 3px red',\n    background: 'aliceblue',\n    color: 'black',\n    fontWeight: 'bold',\n  };\n\n  return (\n    <table {...getTableProps()} style={{ border: 'solid 1px black', width: '98%' }}>\n      <thead>\n      {headerGroups.map(headerGroup => (\n        <tr {...headerGroup.getHeaderGroupProps()}>\n          {headerGroup.headers.map(column => (\n            <th\n              {...column.getHeaderProps()}\n              style={styleTable}\n            >\n              {column.render('Header')}\n            </th>\n          ))}\n          {!readOnly && <th style={styleTable}>Action</th>}\n        </tr>\n      ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n      {rows.map(row => {\n        prepareRow(row);\n        let rowColourTouchable = 'rowTouched';\n        if (row.original.touched !== 1) {\n          rowColourTouchable = 'rowNotTouched';\n        }\n\n        return (\n          <tr {...row.getRowProps()} className={rowColourTouchable}>\n            {row.cells.map(cell => {\n              if (cell.column.id === 'month') {\n                return (\n                  <td {...cell.getCellProps()} className=\"bucketcell\">\n                    {cell.render('NonEditCellMonth')}\n                  </td>\n                );\n              }\n\n              if ((cell.column.id === 'year' || cell.column.id === 'remaining') || readOnly === true) {\n                return (\n                  <td {...cell.getCellProps()} className=\"bucketcell\">\n                    {cell.render('NonEditCell')}\n                  </td>\n                );\n              }\n\n              if (cell.column.id === 'description') {\n                return (\n                  <td {...cell.getCellProps()} className=\"bucketcell\" style={{ width: '400px' }}>\n                    {cell.render('EditMultiline')}\n                  </td>\n                );\n              }\n\n              return (\n                <td {...cell.getCellProps()} className=\"bucketcell\">\n                  {cell.render('Cell')}\n                </td>\n              );\n            })}\n            {!readOnly && rows.length > 1 && <td>\n              <button onClick={() => onRemoveMonth(row.original)} className=\"btn btn-secondary m-1\" type=\"submit\">\n                <FontAwesomeIcon style={{ cursor: 'pointer' }} icon={faTrash}/>\n              </button>\n            </td>}\n          </tr>\n        );\n      })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default BucketTable;\n","import React from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nconst MonthPicker = ({ handleChangeMonth, displayDate }) => {\n  return (\n    <DatePicker\n      selected={displayDate}\n      onChange={handleChangeMonth}\n      dateFormat=\"MM/yyyy\"\n      showMonthYearPicker\n    />\n  );\n};\n\nexport default MonthPicker;\n","import React, { useEffect, useRef, useState } from 'react';\nimport BucketTable from './bucketTable';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArchive, faCheck, faMoneyBill, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport ContentEditable from 'react-contenteditable';\nimport stripHtml from 'string-strip-html';\nimport Tooltip from 'rc-tooltip';\nimport 'rc-tooltip/assets/bootstrap.css';\nimport MonthPicker from './MonthPicker';\n\nconst Bucket = ({ bucket, onArchiveBucket, onRemoveMonth, onAddMonth, handleOnUpdateHoursData, onClickMarkPrepaid, handleUpdateBucketName }) => {\n  const _isMounted = useRef(true); // Initial value _isMounted = true\n  const [confirmModal, setConfirmModal] = useState(null);\n  const [newMonth, SetNewMonth] = useState(new Date());\n\n  // Need this to do a componentwillunmount and cleanup memory leaks.\n  useEffect(() => {\n    // ComponentWillUnmount in Class Component\n    return () => {\n      _isMounted.current = false;\n    };\n  }, []);\n\n  const onClickArchive = (bucketData) => {\n    const modal = (\n      <SweetAlert\n        warning\n        showCancel\n        confirmBtnText=\"Yes, archive it!\"\n        confirmBtnBsStyle=\"warning\"\n        title=\"Are you sure?\"\n        onConfirm={() => onArchiveBucket(bucketData)}\n        onCancel={() => setConfirmModal(null)}\n        focusCancelBtn={false}\n        focusConfirmBtn={false}\n      >\n        This will archive the bucket. It won't appear on the main page or in reports.\n        You can undo this action later.\n      </SweetAlert>\n    );\n    setConfirmModal(modal);\n  };\n\n  const text = useRef(bucket.name);\n  const bucketNameUpdated = (e) => {\n    text.current = stripHtml(e.target.value);\n  };\n\n  const updateBucketName = async () => {\n    // Only update if the name was actually changed.\n    if (text.current === bucket.name) {\n      console.log('bucket name unchanged, not updating');\n      return;\n    }\n\n    await handleUpdateBucketName(bucket, { name: text.current });\n  };\n\n  const handleChangeMonth = date => {\n    SetNewMonth(date);\n  };\n\n  return (\n    <div>\n      <h5 className='ml-3'>\n        <ContentEditable\n          html={text.current}\n          onChange={bucketNameUpdated}\n          onBlur={updateBucketName}\n          spellCheck={false}\n        />\n      </h5>\n      {confirmModal}\n      <div className=\"float-left row\">\n        <div className=\"col-7 mt-2\">\n          <MonthPicker handleChangeMonth={handleChangeMonth} displayDate={newMonth}/>\n        </div>\n        <Tooltip\n          placement=\"left\"\n          mouseEnterDelay={0.5}\n          mouseLeaveDelay={0.1}\n          trigger=\"hover\"\n          overlay={<div>Add month</div>}\n        >\n          <button onClick={() => onAddMonth(bucket, newMonth)} className=\"btn btn-success m-1 ml-5 float-left\"\n                  type=\"submit\">\n            <FontAwesomeIcon style={{ cursor: 'pointer' }} icon={faPlus}/>\n          </button>\n        </Tooltip>\n        <Tooltip\n          placement=\"right\"\n          mouseEnterDelay={0.5}\n          mouseLeaveDelay={0.1}\n          trigger=\"hover\"\n          overlay={<div>Archive bucket</div>}\n        >\n          <button onClick={() => onClickArchive(bucket)} className=\"btn btn-warning m-1 float-left\" type=\"submit\">\n            <FontAwesomeIcon style={{ cursor: 'pointer' }} icon={faArchive}/>\n          </button>\n        </Tooltip>\n      </div>\n      <Tooltip\n        placement=\"right\"\n        mouseEnterDelay={0.5}\n        mouseLeaveDelay={0.1}\n        trigger=\"hover\"\n        overlay={<div>Mark bucket as prepaid</div>}\n      >\n        <button onClick={() => onClickMarkPrepaid(bucket)} className=\"btn btn-info m-1 mr-3 float-right\" type=\"submit\">\n          <FontAwesomeIcon style={{ cursor: 'pointer' }} icon={faMoneyBill}/>\n        </button>\n      </Tooltip>\n\n      {bucket.prepaid === 1 && (\n        <Tooltip\n          placement=\"right\"\n          mouseEnterDelay={0.5}\n          mouseLeaveDelay={0.1}\n          trigger=\"hover\"\n          overlay={<div>This bucket is marked as prepaid</div>}\n        >\n          <button className=\"btn btn-success m-1 float-right\" type=\"submit\">\n            <FontAwesomeIcon style={{ cursor: 'pointer' }} icon={faCheck}/>\n          </button>\n        </Tooltip>\n      )}\n      <BucketTable data={bucket.hours} updateData={handleOnUpdateHoursData} onRemoveMonth={onRemoveMonth}/>\n    </div>\n  );\n};\n\nexport default Bucket;\n","import React from 'react';\n\nconst MonthlySupportHours = ({ activeClient }) => {\n  return (\n    <div>\n      {activeClient.support && <h5>{activeClient.support}</h5>}\n      {!activeClient.support && <h5>{activeClient.name} has no support hours data set.</h5>}\n    </div>\n  );\n};\n\nexport default MonthlySupportHours;\n","import React from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nconst DatePickerComms = ({ handleChangeDate, displayDate }) => {\n  return (\n    <DatePicker\n      selected={displayDate}\n      onChange={handleChangeDate}\n    />\n  );\n};\n\nexport default DatePickerComms;\n","import React, { useEffect, useRef, useState } from 'react';\nimport DatePickerComms from './DatePickerComms';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faTrash } from '@fortawesome/free-solid-svg-icons';\nimport moment from 'moment';\nimport Tooltip from 'rc-tooltip';\nimport 'rc-tooltip/assets/bootstrap.css';\nimport * as clientActions from '../../store/actions/Clients';\nimport { useDispatch } from 'react-redux';\n\nconst Communications = ({ clientID, clientComms, editable }) => {\n  const [newCommText, SetNewCommText] = useState('');\n  const [newCommDate, SetNewCommDate] = useState(new Date());\n  const _isMounted = useRef(true); // Initial value _isMounted = true\n  const dispatch = useDispatch();\n\n  // Need this to do a componentwillunmount and cleanup memory leaks.\n  useEffect(() => {\n    // ComponentWillUnmount in Class Component\n    return () => {\n      _isMounted.current = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    // Reset state when switching clients.\n    SetNewCommText('');\n    SetNewCommDate(new Date());\n  }, [clientID]);\n\n  const onNewCommChangeText = (e) => {\n    SetNewCommText(e.target.value);\n  };\n\n  const handleChangeDate = date => {\n    SetNewCommDate(date);\n  };\n\n  const onAddComm = async () => {\n    const date = Math.floor(newCommDate.getTime() / 1000); // Unix timestamp.\n    await dispatch(clientActions.addCommunication(clientComms, newCommText, date));\n    console.log('stored a new communication with text ' + newCommText + date);\n  };\n\n  const onDeleteComm = async (commID) => {\n    await dispatch(clientActions.deleteCommunication(clientComms, commID));\n    console.log('removed a communication with id ' + commID);\n  };\n\n  return (\n    <div className=\"container-fluid\">\n      <h5>Communications notes</h5>\n      {editable && (\n        <div>\n          <div className=\"col-2\" style={{ width: '50px' }}>\n            <DatePickerComms handleChangeDate={handleChangeDate} displayDate={newCommDate}/>\n          </div>\n          <div className=\"col-8\">\n            <div className=\"form-group row text-center\">\n              <input className=\"form-control m-1\"\n                     placeholder=\"Your text here\"\n                     value={newCommText}\n                     onChange={onNewCommChangeText}\n              />\n              <Tooltip\n                placement=\"right\"\n                mouseEnterDelay={0.5}\n                mouseLeaveDelay={0.1}\n                trigger=\"hover\"\n                overlay={<div>Add comms record</div>}\n              >\n                <button onClick={() => onAddComm()} className=\"btn btn-success m-1\" type=\"submit\">\n                  <FontAwesomeIcon style={{ cursor: 'pointer' }} icon={faPlus}/>\n                </button>\n              </Tooltip>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <table style={{ border: 'solid 1px black', width: '98%' }}>\n        <thead>\n        <tr style={{\n          borderBottom: 'solid 3px red',\n          background: 'aliceblue',\n          color: 'black',\n          fontWeight: 'bold',\n        }}>\n          <th>Date</th>\n          <th>Note</th>\n        </tr>\n        </thead>\n        <tbody>\n        {clientComms && clientComms.map(commObject => {\n          const time = moment(new Date(commObject.date * 1000)).format('MMM Do YYYY');\n          return (\n            <tr key={commObject.id}>\n              <td>\n                {time}\n              </td>\n              <td>\n                {commObject.note}\n              </td>\n              {editable && (\n                <td>\n                  <Tooltip\n                    placement=\"right\"\n                    mouseEnterDelay={0.5}\n                    mouseLeaveDelay={0.1}\n                    trigger=\"hover\"\n                    overlay={<div>Delete</div>}\n                  >\n                    <button onClick={() => onDeleteComm(commObject.id)} className=\"btn btn-secondary m-1\" type=\"submit\">\n                      <FontAwesomeIcon style={{ cursor: 'pointer' }} icon={faTrash}/>\n                    </button>\n                  </Tooltip>\n                </td>\n              )}\n            </tr>\n          );\n        })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Communications;\n","import React, { useMemo, useState } from 'react';\nimport BucketTable from './bucketTable';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash, faTrashRestore } from '@fortawesome/free-solid-svg-icons';\nimport Tooltip from 'rc-tooltip';\nimport 'rc-tooltip/assets/bootstrap.css';\nimport { useDispatch } from 'react-redux';\nimport * as clientActions from '../../store/actions/Clients';\n\nconst ReadOnlyBucket = ({ clientID, bucket, buttons }) => {\n  const [confirmModal, setConfirmModal] = useState(null);\n  const dispatch = useDispatch();\n\n  const data = useMemo(() => {\n    // Grab hoursData and format as array and output here.\n    const hoursDataFormatted = bucket.hours;\n\n    return hoursDataFormatted.map((month) => {\n      return (\n        {\n          month: month.month,\n          year: month.year,\n          invoice: month.invoice,\n          description: month.description,\n          in: month.in,\n          out: month.out,\n          remaining: month.remaining,\n          touched: month.touched,\n        }\n      );\n    });\n  }, [bucket.hours]);\n\n  const onDeleteBucket = async (bucket) => {\n    await dispatch(clientActions.deleteBucket(bucket));\n    console.log('Deleted bucket with name ' + bucket.name);\n  };\n\n  const onClickDelete = (bucketData) => {\n    const modal = (\n      <SweetAlert\n        danger\n        showCancel\n        confirmBtnText=\"Yes, delete it!\"\n        confirmBtnBsStyle=\"danger\"\n        title=\"Are you sure?\"\n        onConfirm={() => onDeleteBucket(bucketData)}\n        onCancel={() => setConfirmModal(null)}\n        focusCancelBtn={false}\n        focusConfirmBtn={false}\n      >\n        You will not be able to recover this bucket data!\n      </SweetAlert>\n    );\n    setConfirmModal(modal);\n  };\n\n  const onUnArchiveBucket = async (clientID, bucket) => {\n    await dispatch(clientActions.updateBucket(bucket, { archived: 0 }));\n    console.log('Unarchived bucket with name ' + bucket.name);\n  };\n\n  const onClickUnarchive = (clientID, bucketData) => {\n    const modal = (\n      <SweetAlert\n        success\n        showCancel\n        confirmBtnText=\"Yes, restore it!\"\n        confirmBtnBsStyle=\"success\"\n        title=\"Are you sure?\"\n        onConfirm={() => onUnArchiveBucket(clientID, bucketData)}\n        onCancel={() => setConfirmModal(null)}\n        focusCancelBtn={false}\n        focusConfirmBtn={false}\n      >\n        This will restore this bucket to the main page again.\n      </SweetAlert>\n    );\n    setConfirmModal(modal);\n  };\n\n  return (\n    <div>\n      <h5 className='ml-3'>{bucket.name}</h5>\n      <BucketTable data={data} readOnly={true}/>\n      {buttons && confirmModal}\n      {buttons && (\n        <div>\n          <Tooltip\n            placement=\"left\"\n            mouseEnterDelay={0.5}\n            mouseLeaveDelay={0.1}\n            trigger=\"hover\"\n            overlay={<div>Delete this bucket</div>}\n          >\n            <button onClick={() => onClickDelete(bucket)} className=\"btn btn-danger m-1\" type=\"submit\">\n              <FontAwesomeIcon style={{ cursor: 'pointer' }} icon={faTrash}/>\n            </button>\n          </Tooltip>\n          <Tooltip\n            placement=\"right\"\n            mouseEnterDelay={0.5}\n            mouseLeaveDelay={0.1}\n            trigger=\"hover\"\n            overlay={<div>Restore this bucket</div>}\n          >\n            <button onClick={() => onClickUnarchive(clientID, bucket)} className=\"btn btn-success m-1\" type=\"submit\">\n              <FontAwesomeIcon style={{ cursor: 'pointer' }} icon={faTrashRestore}/>\n            </button>\n          </Tooltip>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ReadOnlyBucket;\n","import React from 'react';\nimport ReadOnlyBucket from './ReadOnlyBucket';\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Tooltip from 'rc-tooltip/es';\n\nconst ArchivePage = ({ buckets, onBackToClientPage, clientID, restorable }) => {\n  // TODO filter out non archived buckets here.\n  return (\n    <div>\n      <h2>This is the archive page</h2>\n      <div className=\"col-8\">\n        {buckets && buckets.map(bucket => {\n          if (bucket.archived === 1) {\n            return (\n              <div key={bucket.bucketID} className=\"singlebucket\">\n                <ReadOnlyBucket bucket={bucket} clientID={clientID} buttons={restorable}/>\n                <hr/>\n              </div>\n            );\n          }\n\n          return null;\n        })}\n      </div>\n      <Tooltip\n        placement=\"right\"\n        mouseEnterDelay={0.5}\n        mouseLeaveDelay={0.1}\n        trigger=\"hover\"\n        overlay={<div>Back to client page</div>}\n      >\n        <button onClick={onBackToClientPage} className=\"btn btn-success m-1\" type=\"submit\">\n          <FontAwesomeIcon style={{ cursor: 'pointer' }} icon={faArrowLeft}/>\n        </button>\n      </Tooltip>\n    </div>\n  );\n};\n\nexport default ArchivePage;\n","import React from 'react';\nimport Tooltip from 'rc-tooltip/es';\n\nconst OwnerDisplay = ({ owner }) => {\n  if (owner) {\n    return (\n      <Tooltip\n        placement=\"top\"\n        mouseEnterDelay={0.5}\n        mouseLeaveDelay={0.1}\n        trigger=\"hover\"\n        overlay={<div>Owner</div>}\n      >\n        <div className=\"float-right bg-success p-2 rounded ownerbutton\">\n          <em>{owner.username}</em>\n        </div>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <Tooltip\n      placement=\"top\"\n      mouseEnterDelay={0.5}\n      mouseLeaveDelay={0.1}\n      trigger=\"hover\"\n      overlay={<div>Owner</div>}\n    >\n      <div className=\"float-right bg-success p-2 rounded ownerbutton\">\n        <em>No owner</em>\n      </div>\n    </Tooltip>\n  );\n};\n\nexport default OwnerDisplay;\n","import React, { useEffect, useRef, useState } from 'react';\nimport AddBucketForm from './AddBucketForm';\nimport EditClientForm from './EditClientForm';\nimport Bucket from './Bucket';\nimport MonthlySupportHours from './MonthlySupportHours';\nimport Communications from './Communications';\nimport ArchivePage from './ArchivePage';\nimport * as ROUTES from '../../constants/routes';\nimport { useHistory } from 'react-router-dom';\nimport OwnerDisplay from './OwnerDisplay';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as clientActions from '../../store/actions/Clients';\n\nconst SingleClientPage = ({ clientID }) => {\n  const [addingNewBucket, setAddingNewBucket] = useState(false);\n  const [editingClient, setEditingClient] = useState(false);\n  const [viewingArchive, setViewingArchive] = useState(false);\n  const _isMounted = useRef(true); // Initial value _isMounted = true\n  const activeClient = useSelector(state => state.clients.activeClient);\n  const [clientNote, setClientNote] = useState('');\n  const dispatch = useDispatch();\n  useEffect(() => {\n    // Got to reset some state when switching clients.\n    setAddingNewBucket(false);\n    setEditingClient(false);\n    setViewingArchive(false);\n    dispatch(clientActions.fetchClient(clientID));\n  }, [clientID, dispatch]);\n\n  // Need this to do a componentwillunmount and cleanup memory leaks.\n  useEffect(() => {\n    // ComponentWillUnmount in Class Component\n    return () => {\n      _isMounted.current = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    if (activeClient.note !== null) {\n      setClientNote(activeClient.note);\n    } else {\n      setClientNote('');\n    }\n  }, [activeClient]);\n\n  const onCreateBucket = () => {\n    setAddingNewBucket(true);\n  };\n\n  const onEditClient = () => {\n    setEditingClient(true);\n  };\n\n  const onViewArchive = () => {\n    setViewingArchive(true);\n  };\n\n  const onEditClientNote = e => {\n    setClientNote(e.target.value);\n  };\n\n  const updateClientNote = e => {\n    // Only update with a request if the note actually changed.\n    if (activeClient.note === clientNote) {\n      console.log('no change to client note, not updating');\n      return;\n    }\n\n    dispatch(clientActions.updateClient(clientID, { note: clientNote }));\n  };\n\n  const onBackToClientPage = () => {\n    setAddingNewBucket(false);\n    setEditingClient(false);\n    setViewingArchive(false);\n  };\n\n  const onDeleteClient = () => {\n    dispatch(clientActions.deleteClient(clientID));\n  };\n\n  const history = useHistory();\n  const onViewClient = () => {\n    history.push(ROUTES.CLIENTS + '/' + clientID);\n  };\n\n  const onArchiveBucket = async (bucket) => {\n    await dispatch(clientActions.updateBucket(bucket, { archived: 1 }));\n  };\n\n  const onRemoveMonth = async (hours) => {\n    await dispatch(clientActions.deleteMonth(hours));\n  };\n\n  const onAddMonth = async (bucket, newMonth) => {\n    // If the month already exists, it will add the previous month instead.\n    await dispatch(clientActions.createMonth(bucket, newMonth));\n  };\n\n  const handleOnUpdateHoursData = (hoursid, column, value) => {\n    dispatch(clientActions.updateHoursData(hoursid, column, value));\n  };\n\n  const onClickMarkPrepaid = async (bucket) => {\n    let prepaid = 0;\n    if (bucket.prepaid === 0) {\n      prepaid = 1;\n    }\n\n    await dispatch(clientActions.updateBucket(bucket, { prepaid: prepaid }));\n  };\n\n  const handleUpdateBucketName = async (bucket, data) => {\n    await dispatch(clientActions.updateBucket(bucket, data));\n    console.log('bucket updated to have name ' + data.name);\n  };\n  // Do not start rendering if we can't find the activeClient yet. Still being fetched.\n  if (Object.keys(activeClient).length === 0 && activeClient.constructor === Object) {\n    return (\n      <div>\n        <h1>no active client found</h1>\n      </div>\n    );\n  }\n\n  if (addingNewBucket) {\n    return (\n      <div>\n        <AddBucketForm clientID={clientID} onFinishSubmission={onBackToClientPage}/>\n      </div>\n    );\n  }\n\n  if (editingClient) {\n    return (\n      <div>\n        <EditClientForm onDeleteClient={onDeleteClient} clientData={activeClient}\n                        onFinishSubmission={onBackToClientPage} owner={activeClient.owner}/>\n      </div>\n    );\n  }\n\n  if (viewingArchive) {\n    return (\n      <ArchivePage buckets={activeClient.buckets} onBackToClientPage={onBackToClientPage} clientID={clientID}\n                   restorable={true}/>\n    );\n  }\n\n  return (\n    <div>\n      <button onClick={onViewArchive} className=\"btn btn-warning m-1 float-right\" type=\"submit\">View Bucket Archive\n      </button>\n      <button onClick={onCreateBucket} className=\"btn btn-primary m-1 float-right\" type=\"submit\">Create a bucket\n      </button>\n      <button onClick={onEditClient} className=\"btn btn-secondary m-1 float-right\" type=\"submit\">Edit Client</button>\n      <button onClick={onViewClient} className=\"btn btn-warning m-1 float-right\" type=\"submit\">To Client Page</button>\n      <div className=\"card mt-3 mb-3\">\n        <div className=\"card-header\">\n          <h1>\n            {activeClient.name}\n            <OwnerDisplay owner={activeClient.owner}/>\n          </h1>\n          {Object.keys(activeClient).length !== 0 && <div className=\"float-left\"><i>Last updated\n            by {activeClient.lastupdated.username} - {activeClient.lastupdated.date}</i></div>}\n        </div>\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">\n            <MonthlySupportHours activeClient={activeClient}/>\n          </h5>\n        </div>\n      </div>\n      <div>\n                <textarea\n                  className=\"form-control\"\n                  onChange={onEditClientNote}\n                  onBlur={updateClientNote}\n                  value={clientNote}\n                  placeholder=\"Notes\"\n                  style={{ height: '7rem', width: '50rem' }}\n                  autoCorrect=\"off\"\n                  autoCapitalize=\"off\"\n                  spellCheck=\"false\"\n                />\n      </div>\n      <hr/>\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-8\">\n            {activeClient.buckets.map(bucket => {\n              if (bucket.archived === 0) {\n                return (\n                  <div key={bucket.id} className=\"singlebucket\">\n                    <Bucket\n                      bucket={bucket}\n                      onArchiveBucket={onArchiveBucket}\n                      onRemoveMonth={onRemoveMonth}\n                      onAddMonth={onAddMonth}\n                      handleOnUpdateHoursData={handleOnUpdateHoursData}\n                      onClickMarkPrepaid={onClickMarkPrepaid}\n                      handleUpdateBucketName={handleUpdateBucketName}\n                    />\n                    <hr/>\n                  </div>\n                );\n              }\n\n              return null;\n            })}\n          </div>\n          <div className=\"col-4\">\n            <Communications clientID={clientID} clientComms={activeClient.communication} editable={true}/>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SingleClientPage;\n","import React from 'react';\n\nconst ClientBlankPage = ({ type }) => {\n  return (\n    <div>\n      <h1>No client selected</h1>\n      <h4>Please select a client on the left to {type} month by month hours data.</h4>\n    </div>\n  );\n};\n\nexport default ClientBlankPage;\n","import React, { useEffect, useState } from 'react';\nimport Sidebar from '../Navigation/sidebar';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport * as ROUTES from '../../constants/routes';\nimport NewClientForm from './NewClientPage';\nimport SingleClientPage from './SingleClientPage';\nimport ClientBlankPage from './ClientBlankPage';\nimport * as clientActions from '../../store/actions/Clients';\nimport * as authActions from '../../store/actions/Auth';\nimport { useDispatch, useSelector } from 'react-redux';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport { useHistory } from 'react-router-dom';\n\nconst ClientPage = () => {\n  const [confirmModal, setConfirmModal] = useState(null);\n  const [confirmed, setConfirmed] = useState(false);\n  const dispatch = useDispatch();\n  const currentUser = useSelector(state => state.auth.currentUser);\n  const activeClient = useSelector(state => state.clients.activeClient);\n  const history = useHistory();\n  const clientIDinurl = window.location.pathname.split(ROUTES.CLIENTADMIN + '/').pop();\n  let newClient = false;\n  let noClient = false;\n  if (window.location.pathname === ROUTES.CLIENTADMIN + ROUTES.NEW) {\n    newClient = true;\n  }\n\n  if (window.location.pathname === ROUTES.CLIENTADMIN) {\n    noClient = true;\n  }\n\n  useEffect(() => {\n    // Should only be fetching if we are signed in properly.\n    if (currentUser) {\n      dispatch(clientActions.fetchClients());\n      dispatch(authActions.fetchUsers());\n    }\n  }, [dispatch, currentUser]);\n\n  const onConfirmEditOtherOwnersClient = () => {\n    console.log('confirmed to edit this client, log this?');\n    setConfirmed(true);\n    setConfirmModal(null);\n  };\n\n  const goToReadOnlyPage = () => {\n    setConfirmModal(null);\n    history.push(ROUTES.CLIENTS + '/' + activeClient.id);\n  };\n\n  const modal = (\n    <SweetAlert\n      warning\n      showCancel\n      confirmBtnText=\"Client read only page\"\n      confirmBtnBsStyle=\"warning\"\n      cancelBtnText=\"Yes, I want to edit\"\n      title=\"Are you sure?\"\n      onCancel={() => onConfirmEditOtherOwnersClient()}\n      onConfirm={() => goToReadOnlyPage()}\n      focusCancelBtn={false}\n      focusConfirmBtn={false}\n    >\n      You are not the owner of this client. Do you want to edit the data anyway?\n    </SweetAlert>\n  );\n\n  // First check that we have a currentUser set and an activeclient.\n  if (noClient === false && confirmed === false && confirmModal === null && currentUser && Object.keys(activeClient).length !== 0) {\n    if (activeClient.ownerid !== currentUser.id && activeClient.ownerid !== null) {\n      setConfirmModal(modal);\n    }\n  }\n\n  return (\n    <div>\n      {confirmModal}\n      <Container fluid>\n        <Row>\n          <Col xs={2} id=\"sidebar-wrapper\">\n            <Sidebar/>\n          </Col>\n          <Col xs={10}>\n            {noClient && <ClientBlankPage type={'enter'}/>}\n            {newClient && <NewClientForm/>}\n            {!newClient && !noClient && <SingleClientPage clientID={clientIDinurl}/>}\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default ClientPage;\n","import React, { useEffect, useRef, useState } from 'react';\nimport MonthlySupportHours from './MonthlySupportHours';\nimport Communications from './Communications';\nimport ArchivePage from './ArchivePage';\nimport ReadOnlyBucket from './ReadOnlyBucket';\nimport { useHistory } from 'react-router-dom';\nimport * as ROUTES from '../../constants/routes';\nimport OwnerDisplay from './OwnerDisplay';\nimport * as clientActions from '../../store/actions/Clients';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// Display all the client information in a non editable way.\nconst SingleClientReadOnlyPage = ({ clientID }) => {\n  const [viewingArchive, setViewingArchive] = useState(false);\n  const _isMounted = useRef(true); // Initial value _isMounted = true\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const activeClient = useSelector(state => state.clients.activeClient);\n  const currentUser = useSelector(state => state.auth.currentUser);\n\n  useEffect(() => {\n    // Got to reset some state when switching clients.\n    setViewingArchive(false);\n  }, [clientID]);\n\n  // Need this to do a componentwillunmount and cleanup memory leaks.\n  useEffect(() => {\n    // ComponentWillUnmount in Class Component\n    return () => {\n      _isMounted.current = false;\n    };\n  }, []);\n  useEffect(() => {\n    dispatch(clientActions.fetchClient(clientID));\n  }, [clientID, dispatch]);\n\n  const onViewArchive = () => {\n    setViewingArchive(true);\n  };\n\n  const onBackToClientPage = () => {\n    setViewingArchive(false);\n  };\n\n  if (viewingArchive) {\n    return (\n      <ArchivePage buckets={activeClient.buckets} onBackToClientPage={onBackToClientPage} clientID={clientID} restorable={false}/>\n    );\n  }\n\n  const onViewClientReport = () => {\n    history.push(ROUTES.REPORT + '/' + clientID);\n  };\n\n  const onViewClientAdmin = () => {\n    history.push(ROUTES.CLIENTADMIN + '/' + clientID);\n  };\n\n  const ToAdminPage = () => {\n    return <button onClick={onViewClientAdmin} className=\"btn btn-danger m-1 float-right\" type=\"submit\">To Client\n      Admin</button>;\n  };\n\n  return (\n    <div>\n      <button onClick={onViewArchive} className=\"btn btn-warning m-1 float-right\" type=\"submit\">View Bucket Archive\n      </button>\n      <button onClick={onViewClientReport} className=\"btn btn-warning m-1 float-right\" type=\"submit\">To Report</button>\n      {currentUser.role === 3 && <ToAdminPage/>}\n      <div className=\"card mt-3\">\n        <div className=\"card-header\">\n          <h1>\n            {activeClient.name}\n            <OwnerDisplay owner={activeClient.owner}/>\n          </h1>\n          {Object.keys(activeClient).length !== 0 && <div className=\"float-left\"><i>Last updated\n            by {activeClient.lastupdated.username} - {activeClient.lastupdated.date}</i></div>}\n        </div>\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">\n            <MonthlySupportHours activeClient={activeClient}/>\n          </h5>\n          <div>\n            {activeClient.note}\n          </div>\n        </div>\n      </div>\n      <hr/>\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-8\">\n            {activeClient.buckets && activeClient.buckets.map(bucket => {\n              if (bucket.archived === 0) {\n                return (\n                    <div key={bucket.id} className=\"singlebucket\">\n                      <ReadOnlyBucket clientID={clientID} bucket={bucket} buttons={false}/>\n                      <hr/>\n                    </div>\n                );\n              }\n              return null;\n            })}\n          </div>\n          <div className=\"col-4\">\n            <Communications clientID={clientID} clientComms={activeClient.communication} editable={false}/>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SingleClientReadOnlyPage;\n","import React, { useEffect } from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport Sidebar from '../Navigation/sidebar';\nimport ClientBlankPage from './ClientBlankPage';\nimport * as ROUTES from '../../constants/routes';\nimport SingleClientReadOnlyPage from './SingleClientReadOnlyPage';\nimport { useDispatch } from 'react-redux';\nimport * as clientActions from '../../store/actions/Clients';\nimport * as authActions from '../../store/actions/Auth';\n\n// Display all the client information in a non editable way.\nconst ClientReadOnlyPage = () => {\n  const dispatch = useDispatch();\n  const clientIDinurl = window.location.pathname.split(ROUTES.CLIENTS + '/').pop();\n  let noClient = false;\n  if (window.location.pathname === ROUTES.CLIENTS) {\n    noClient = true;\n  }\n\n  useEffect(() => {\n    dispatch(clientActions.fetchClients());\n    dispatch(authActions.fetchUsers());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Container fluid>\n        <Row>\n          <Col xs={2} id=\"sidebar-wrapper\">\n            <Sidebar/>\n          </Col>\n          <Col xs={10}>\n            {noClient && <ClientBlankPage type={'view'}/>}\n            {!noClient && <SingleClientReadOnlyPage clientID={clientIDinurl}/>}\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default ClientReadOnlyPage;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport * as ROUTES from '../../constants/routes';\n\nconst PageNotFound = () => (\n  <div className=\"justify-content-center text-center\">\n    <div className=\"row pt-5 mt-5 d-flex justify-content-center\">\n    </div>\n    <Link className=\"btn mt-5 btn-primary text-center\" to={ROUTES.LANDING}>\n      Go to dashboard\n    </Link>\n  </div>\n);\nexport default PageNotFound;\n","import React from 'react';\n\nconst ReportBlankPage = () => {\n  return (\n    <div>\n      <h1>No client selected</h1>\n      <h4>Please select a client on the left to view reports.</h4>\n    </div>\n  );\n};\n\nexport default ReportBlankPage;\n","import React from 'react';\nimport { VictoryLabel, VictoryPie } from 'victory';\n\nconst ReportPieChart = ({ chartData, clientName }) => {\n  let formattedChartData = [];\n  for (const key in chartData) {\n    if (chartData.hasOwnProperty(key)) {\n      formattedChartData.push({ x: chartData[key], y: chartData[key], label: key + ': ' + chartData[key] });\n    }\n  }\n\n  return (\n    <div>\n      <svg viewBox=\"0 0 400 400\" style={{ overflow: 'visible' }}>\n        <VictoryPie\n          standalone={false}\n          width={400} height={400}\n          data={formattedChartData}\n          innerRadius={68} labelRadius={170}\n          colorScale=\"qualitative\"\n        />\n        <VictoryLabel\n          textAnchor=\"middle\"\n          style={{ fontSize: 20 }}\n          x={200} y={200}\n          text={clientName}\n        />\n      </svg>\n    </div>\n  );\n};\n\nexport default ReportPieChart;\n","import React, { useEffect, useRef } from 'react';\nimport uuid from 'react-uuid';\nimport ReportPieChart from './ReportPieChart';\nimport MonthlySupportHours from './MonthlySupportHours';\nimport { useHistory } from 'react-router-dom';\nimport * as ROUTES from '../../constants/routes';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as clientActions from '../../store/actions/Clients';\n\nconst SingleReportPage = ({ clientID }) => {\n  const _isMounted = useRef(true); // Initial value _isMounted = true\n  const activeClient = useSelector(state => state.clients.activeClient);\n  const dispatch = useDispatch();\n\n  // Need this to do a componentwillunmount and cleanup memory leaks.\n  useEffect(() => {\n    // ComponentWillUnmount in Class Component\n    return () => {\n      _isMounted.current = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    dispatch(clientActions.fetchClient(clientID));\n  }, [clientID, dispatch]);\n\n  let total = 0;\n  let chartData = {};\n  const history = useHistory();\n  const onViewClient = () => {\n    history.push(ROUTES.CLIENTS + '/' + clientID);\n  };\n\n  return (\n    <div>\n      <button onClick={onViewClient} className=\"btn btn-warning m-1 float-right\" type=\"submit\">To Client Page</button>\n      <h1>{activeClient.name} Report</h1>\n      <MonthlySupportHours activeClient={activeClient}/>\n      <table className=\"table\">\n        <thead className=\"theat-dark\">\n        <tr>\n          <th scope=\"col\">Bucket Name</th>\n          <th scope=\"col\">Total Remaining hours</th>\n        </tr>\n        </thead>\n        <tbody>\n        {activeClient.buckets && activeClient.buckets.map(bucket => {\n          if (bucket.archived === 1) {\n            return null; // No reports on archived buckets.\n          }\n          let remainingCurrent = 0;\n          const hoursarraylength = bucket.hours.length;\n          if (hoursarraylength > 0) {\n            remainingCurrent = bucket.hours[hoursarraylength - 1].remaining;\n          }\n\n          total = total + remainingCurrent;\n          chartData[bucket.name] = remainingCurrent;\n          return (\n            <tr key={bucket.id}>\n              <td>{bucket.name}</td>\n              <td>{remainingCurrent}</td>\n            </tr>\n          );\n        })}\n        <tr className=\"theat-dark\" key={uuid()}>\n          <th>Total</th>\n          <th>{total}</th>\n        </tr>\n        </tbody>\n      </table>\n      <div className=\"w-25\" style={{ marginLeft: 300 }}>\n        <ReportPieChart chartData={chartData} clientName={activeClient.name}/>\n      </div>\n    </div>\n  );\n};\n\nexport default SingleReportPage;\n","import React, { useEffect, useRef } from 'react';\nimport Sidebar from '../Navigation/sidebar';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport * as ROUTES from '../../constants/routes';\nimport ReportBlankPage from './ReportBlankPage';\nimport SingleReportPage from './SingleReportPage';\nimport * as clientActions from '../../store/actions/Clients';\nimport * as authActions from '../../store/actions/Auth';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst ReportPage = () => {\n  const dispatch = useDispatch();\n  const currentUser = useSelector(state => state.auth.currentUser);\n  const clientIDinurl = window.location.pathname.split(ROUTES.REPORT + '/').pop();\n  const _isMounted = useRef(true); // Initial value _isMounted = true\n  let noClientSelected = false;\n  if (window.location.pathname === ROUTES.REPORT) {\n    noClientSelected = true;\n  }\n\n  useEffect(() => {\n    // Should only be fetching if we are signed in properly.\n    if (currentUser) {\n      dispatch(clientActions.fetchClients());\n      dispatch(authActions.fetchUsers());\n    }\n  }, [dispatch, currentUser]);\n\n  // Need this to do a componentwillunmount and cleanup memory leaks.\n  useEffect(() => {\n    // ComponentWillUnmount in Class Component\n    return () => {\n      _isMounted.current = false;\n    };\n  }, []);\n  return (\n    <div>\n      <Container fluid>\n        <Row>\n          <Col xs={2} id=\"sidebar-wrapper\">\n            <Sidebar/>\n          </Col>\n          <Col xs={10}>\n            {noClientSelected && <ReportBlankPage/>}\n            {!noClientSelected && <SingleReportPage clientID={clientIDinurl}/>}\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default (ReportPage);\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Container } from 'react-bootstrap';\nimport moment from 'moment';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as clientActions from '../../store/actions/Clients';\nimport * as authActions from '../../store/actions/Auth';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\n\n// This page should show the buckets that have had hours go out in the last 3 months.\nconst SummaryPage = () => {\n  const dispatch = useDispatch();\n  const _isMounted = useRef(true); // Initial value _isMounted = true\n  const [lastthreemonths, setLastthreemonths] = useState([]);\n  const clientData = useSelector(state => state.clients.clientSummaryData);\n  const adminUsers = useSelector(state => state.auth.adminUsers);\n  const currentUser = useSelector(state => state.auth.currentUser);\n\n  useEffect(() => {\n    const currentMonth = moment(new Date()).endOf('month');\n    const thisMonth = currentMonth.format('MMM YYYY');\n    const lastMonth = currentMonth.subtract(1, 'months').format('MMM YYYY');\n    const twomonthsago = currentMonth.subtract(1, 'months').format('MMM YYYY');\n    const lastthreemonthsarray = [\n      twomonthsago,\n      lastMonth,\n      thisMonth,\n    ];\n    setLastthreemonths(lastthreemonthsarray);\n    // ComponentWillUnmount in Class Component\n    return () => {\n      _isMounted.current = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    // Should only be fetching if we are signed in properly.\n    if (currentUser) {\n      dispatch(clientActions.fetchClientSummary());\n      dispatch(authActions.fetchUsers());\n    }\n  }, [dispatch, currentUser]);\n\n  const SummaryPageInfo = () => {\n    return (\n      <div className=\"m-4\">\n        <h3>What is this?</h3>\n        <p>This summary page shows buckets that fit the following criteria:</p>\n        <ul>\n          <li>The bucket is marked as prepaid: <button className=\"btn btn-success m-1\" type=\"submit\">\n            <FontAwesomeIcon icon={faCheck}/>\n          </button></li>\n          <li>The bucket has hours <u>out</u> in the last 3 months</li>\n          <li>The bucket is not archived</li>\n        </ul>\n      </div>\n    );\n  }\n\n  if (clientData.length === 0) {\n    return (\n      <div>\n        <SummaryPageInfo/>\n        <hr/>\n        <div className=\"m-4\">\n          No buckets found matching the summary criteria.\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <SummaryPageInfo/>\n      <Container fluid>\n        <table className=\"table\">\n          <thead className=\"theat-dark\">\n          <tr>\n            <th scope=\"col\">Client</th>\n            <th scope=\"col\">Owner</th>\n            <th scope=\"col\">Bucket</th>\n            {lastthreemonths.map(month => {\n              return <th key={month} scope=\"col\">{month}</th>;\n            })}\n          </tr>\n          </thead>\n          {clientData.map(client => {\n            const bucketRender = client.buckets.map(bucket => {\n              return (\n                <tr key={bucket.id}>\n                  <td>{bucket.name}</td>\n                  {bucket.hours.map(hours => {\n                    return (\n                      <td key={hours.id}>{hours.out}</td>\n                    );\n                  })}\n                </tr>\n              );\n            });\n\n            let user = 'No owner';\n            const founduser = adminUsers.find(user => user.id === client.ownerid);\n            if (founduser !== undefined) {\n              user = founduser.username;\n            }\n\n            return (\n              <tbody key={client.id}>\n              <tr key={client.id}>\n                <th rowSpan=\"0\">{client.name}</th>\n                <th rowSpan=\"0\">{user}</th>\n              </tr>\n              {bucketRender}\n              </tbody>\n            );\n          })}\n        </table>\n      </Container>\n    </div>\n  );\n};\n\nexport default (SummaryPage);\n","import React, { useEffect, useMemo, useRef } from 'react';\nimport { Container } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as clientActions from '../../store/actions/Clients';\nimport * as authActions from '../../store/actions/Auth';\nimport { useSortBy, useTable } from 'react-table';\n\nconst OwnerPage = () => {\n  const _isMounted = useRef(true); // Initial value _isMounted = true\n  const clients = useSelector(state => state.clients.clients);\n  const adminUsers = useSelector(state => state.auth.adminUsers);\n  const dispatch = useDispatch();\n\n  // Need this to do a componentwillunmount and cleanup memory leaks.\n  useEffect(() => {\n    // ComponentWillUnmount in Class Component\n    return () => {\n      _isMounted.current = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    dispatch(clientActions.fetchClients());\n    dispatch(authActions.fetchUsers());\n  }, [dispatch]);\n\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Client',\n        accessor: 'client',\n      },\n      {\n        Header: 'Owner',\n        accessor: 'owner',\n      },\n    ],\n    []\n  );\n  // Makes the sorting consistent.\n  const capitalizeFirstLetter = (uncapitalString) => uncapitalString.charAt(0).toUpperCase() + uncapitalString.slice(1);\n  const data = useMemo(() => {\n    // Grab data and format as array and output here.\n    return clients.map((client) => {\n      const owner = adminUsers.filter(user => user.id === client.ownerid);\n      let ownername = 'No owner';\n      if (Object.keys(owner).length > 0) {\n        ownername = owner[0].username;\n      }\n\n      return (\n        {\n          client: capitalizeFirstLetter(client.name),\n          owner: capitalizeFirstLetter(ownername),\n        }\n      );\n    });\n  }, [clients, adminUsers]);\n\n  // Create a non editable cell renderer\n  const NonEditableCell = ({ cell }) => {\n    if (!cell.value) {\n      return null;\n    }\n\n    return cell.value;\n  };\n  // Set our editable cell renderer as the default Cell renderer\n  const defaultColumn = {\n    Cell: NonEditableCell,\n  };\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n    },\n    useSortBy\n  );\n\n  if (clients.length === 0 || adminUsers.length === 0) {\n    return (\n      <div>\n        Loading client owners page\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <Container fluid>\n        <table {...getTableProps()} className=\"table w-50\">\n          <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  {column.render('Header')}\n                  <span>\n                                        {column.isSorted\n                                          ? column.isSortedDesc\n                                            ? ' ⬇️'\n                                            : ' ⬆️'\n                                          : ''}\n                                      </span>\n                </th>\n\n              ))}\n            </tr>\n          ))}\n          </thead>\n          <tbody {...getTableBodyProps()}>\n          {rows.map(row => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n          </tbody>\n        </table>\n      </Container>\n    </div>\n  );\n};\n\nexport default OwnerPage;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Navigation from '../Navigation';\nimport LandingPage from '../Landing';\nimport SignUpPage from '../SignUp';\nimport SignInPage from '../SignIn';\nimport AccountPage from '../Account';\nimport AdminPage from '../Admin';\nimport LogsPage from '../Admin/LogsPage';\nimport * as ROUTES from '../../constants/routes';\nimport ClientPage from './ClientPage';\nimport ClientReadOnlyPage from './ClientReadOnlyPage';\nimport PageNotFound from '../Error';\nimport ReportPage from './ReportPage';\nimport SummaryPage from './SummaryPage';\nimport OwnerPage from './OwnerPage';\n\nconst App = () => (\n  <Router>\n    <div>\n      <Navigation/>\n      <Switch>\n        <Route exact path={ROUTES.LANDING} component={LandingPage}/>\n        <Route path={ROUTES.SIGN_UP} component={SignUpPage}/>\n        <Route path={ROUTES.SIGN_IN} component={SignInPage}/>\n        <Route exact path={ROUTES.CLIENTADMIN + ROUTES.NEW} component={ClientPage}/>\n        <Route path={ROUTES.CLIENTADMIN} component={ClientPage}/>\n        <Route path={ROUTES.CLIENTS} component={ClientReadOnlyPage}/>\n        <Route path={ROUTES.REPORT} component={ReportPage}/>\n        <Route path={ROUTES.SUMMARY} component={SummaryPage}/>\n        <Route path={ROUTES.OWNERS} component={OwnerPage}/>\n        <Route path={ROUTES.ACCOUNT} component={AccountPage}/>\n        <Route path={ROUTES.ADMIN} component={AdminPage}/>\n        <Route path={ROUTES.LOGS} component={LogsPage}/>\n        <Route component={PageNotFound}/>\n      </Switch>\n    </div>\n  </Router>\n);\nexport default (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SET_USERDATA, SIGNED_IN, SIGNED_OUT } from '../actions/Auth';\n\nconst localdata = JSON.parse(localStorage.getItem('authUser'));\nlet user = [];\nif (localdata) {\n  user = localdata;\n}\n\nconst initialState = {\n  users: [],\n  adminUsers: [],\n  currentUser: user,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USERDATA:\n      // Add the adminUsers also to a second object for easy querying.\n      const admins = action.users.filter((user) => user.role === 3);\n      return {\n        ...state,\n        users: action.users,\n        adminUsers: admins,\n      };\n    case SIGNED_IN:\n      // We just signed in so store our token in local storage and in redux state.\n      const currentuser = action.data.authUser;\n      localStorage.setItem('authUser', JSON.stringify(currentuser));\n      return {\n        ...state,\n        currentUser: currentuser,\n      };\n    case SIGNED_OUT:\n      // We just signed out so delete our token in local storage and in redux state.\n      localStorage.removeItem('authUser');\n      return {\n        ...state,\n        currentUser: [],\n      };\n    default:\n      return state;\n  }\n};\n","import { FETCH_CLIENT, RESET_CLIENTDATA, SET_CLIENT_SUMMARY_DATA, SET_CLIENTDATA } from '../actions/Clients';\n\nconst initialState = {\n  clients: [],\n  activeClient: {},\n  clientSummaryData: [],\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_CLIENTDATA:\n      return {\n        ...state,\n        clients: action.clients,\n      };\n    case SET_CLIENT_SUMMARY_DATA:\n      return {\n        ...state,\n        clientSummaryData: action.clients,\n      };\n    case FETCH_CLIENT:\n      return {\n        ...state,\n        activeClient: action.activeClient,\n      };\n    case RESET_CLIENTDATA:\n      return initialState;\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\nimport './bootstrap-overrides.scss';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport authReducer from './store/reducers/Auth';\nimport clientsReducer from './store/reducers/Clients';\n\nconst rootReducer = combineReducers({\n  auth: authReducer,\n  clients: clientsReducer,\n});\nconst store = createStore(rootReducer, applyMiddleware(ReduxThunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const LANDING = '/';\nexport const SIGN_UP = '/signup';\nexport const SIGN_IN = '/signin';\nexport const CLIENTS = '/clients';\nexport const CLIENTADMIN = '/clientadmin';\nexport const REPORT = '/report';\nexport const SUMMARY = '/summary';\nexport const OWNERS = '/owners';\nexport const NEW = '/new';\nexport const ACCOUNT = '/account';\nexport const ADMIN = '/admin';\nexport const LOGS = '/logs';\nexport const PASSWORD_FORGET = '/pw-forget';\n"],"sourceRoot":""}