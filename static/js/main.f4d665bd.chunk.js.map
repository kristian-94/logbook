{"version":3,"sources":["store/actions/Clients.js","components/Navigation/History.js","constants/AppConstants.js","store/actions/Auth.js","components/SignOut/index.js","constants/names.js","components/Navigation/index.js","components/Landing/index.js","components/SignUp/index.js","components/SignIn/DemoSignIn.js","components/SignIn/index.js","components/Account/index.js","components/Admin/index.js","constants/roles.js","components/Admin/LogsPage.js","components/Navigation/sidebar.js","components/App/NewClientPage.js","components/App/AddBucketForm.js","components/App/EditClientForm.js","components/App/bucketTable.js","components/App/MonthPicker.js","components/App/Bucket.js","components/App/MonthlySupportHours.js","components/App/DatePickerComms.js","components/App/Communications.js","components/App/ReadOnlyBucket.js","components/App/ArchivePage.js","components/App/OwnerDisplay.js","components/App/SingleClientPage.js","components/App/ClientBlankPage.js","components/App/ClientPage.js","components/App/SingleClientReadOnlyPage.js","components/App/ClientReadOnlyPage.js","components/Error/index.js","components/App/ReportBlankPage.js","components/App/ReportPieChart.js","components/App/SingleReportPage.js","components/App/ReportPage.js","components/App/SummaryPage.js","components/App/OwnerPage.js","components/App/index.js","serviceWorker.js","store/reducers/Auth.js","store/reducers/Clients.js","index.js","constants/routes.js"],"names":["SET_CLIENTDATA","SET_CLIENT_SUMMARY_DATA","FETCH_CLIENT","REMOVE_CLIENT","RESET_CLIENTDATA","getAuthConfig","unencoded_token","content","access_token","Buffer","from","toString","authconfig","config","headers","Authorization","fetchClients","dispatch","getState","a","auth","currentUser","axios","get","BACKEND_URL","response","status","Error","type","clients","data","SIGNED_OUT","history","push","ROUTES","fetchClient","clientid","console","log","authConfig","responseClient","activeClient","client","removeActiveClient","fetchClientSummary","numberOfMonths","updateClient","clientData","put","deleteClient","delete","createClient","name","clientdata","post","id","createBucket","newbucketname","deleteBucket","bucket","updateBucket","addCommunication","communications","newcommtext","date","note","deleteCommunication","commid","updateHoursData","hoursid","column","newvalue","deleteMonth","hoursrecord","createMonth","month","getMonth","year","getFullYear","bucketid","createBrowserHistory","process","CONFIG_JSON","Accept","CONFIG_JSON_CONTENT","SET_USERDATA","SIGNED_IN","fetchUsers","users","signIn","email","password","success","message","signOut","signUp","username","updateRole","userid","role","SignOutButton","useDispatch","useHistory","authActions","className","onClick","SITENAME","NavigationAdminAuth","authUser","Navbar","bg","expand","variant","Container","style","maxWidth","Brand","to","NAMES","Toggle","aria-controls","Collapse","Nav","SignOut","NavigationBasicAuth","NavigationNonAuth","Navigation","useSelector","state","undefined","Landing","window","location","pathname","NonAuth","Auth","INITIAL_STATE","passwordOne","passwordTwo","error","SignUpFormBase","props","onSubmit","event","then","setState","catch","preventDefault","onChange","target","value","this","isInvalid","placeholder","disabled","Component","SignUpLink","SignUpForm","compose","withRouter","SignUpPage","DemoSignInFormBase","isLoading","height","width","radius","color","ariaLabel","wrapperClass","wrapperStyle","visible","DemoSignInForm","connect","SignInFormBase","SignInForm","SignInPage","AccountPage","UserList","promote","useState","confirmModal","setConfirmModal","giveNewRole","newRole","onClickAction","alertType","modal","showCancel","confirmBtnText","confirmBtnBsStyle","title","onConfirm","onCancel","focusCancelBtn","focusConfirmBtn","warning","scope","map","user","key","placement","mouseEnterDelay","mouseLeaveDelay","trigger","overlay","cursor","icon","faLevelDownAlt","faLevelUpAlt","AdminPage","adminUsers","allUsers","loading","setLoading","basicUsers","setBasicUsers","useEffect","length","filter","LogsPage","logs","setLogs","page","setPage","perpage","setperpage","totalitemsCount","setTotalitemsCount","fetchLogs","pageNumber","pagesize","parseInt","onClickPerPage","newpagelimit","PageLimitSetter","borderBottom","minWidth","category","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","itemClass","linkClass","Sidebar","_isMounted","useRef","filterUserId","setFilterUser","clientList","filterUser","localStorage","getItem","current","Filter","onFilterClicked","setItem","DropdownButton","size","Dropdown","Item","Divider","getSection","section","substr","AddNewClientLink","Link","activeKey","onSelect","selectedKey","alert","filteredUser","filteringText","ownerid","onClientChanged","NewClientForm","initialValues","validationSchema","Yup","required","values","setSubmitting","clientActions","clientId","handleSubmit","isSubmitting","AddBucketForm","clientID","onFinishSubmission","cancelForm","EditClientForm","onDeleteClient","owner","adminusers","support","updatedata","Number","htmlFor","as","display","label","danger","onClickDeleteClient","BucketTable","updateData","onRemoveMonth","readOnly","defaultColumn","Cell","initialValue","row","updateMyData","setValue","e","onBlur","NonEditCell","cell","toFixed","NonEditCellMonth","Date","toLocaleString","EditMultiline","columns","React","useMemo","Header","accessor","useTable","currentmonth","hour","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","styleTable","background","fontWeight","border","headerGroup","getHeaderGroupProps","getHeaderProps","render","rowColourTouchable","original","touched","getRowProps","cells","getCellProps","faTrash","MonthPicker","handleChangeMonth","displayDate","selected","dateFormat","showMonthYearPicker","Bucket","onArchiveBucket","onAddMonth","handleOnUpdateHoursData","onClickMarkPrepaid","handleUpdateBucketName","newMonth","SetNewMonth","text","updateBucketName","html","stripHtml","spellCheck","faPlus","bucketData","onClickArchive","faArchive","faMoneyBill","prepaid","faCheck","hours","MonthlySupportHours","DatePickerComms","handleChangeDate","Communications","clientComms","editable","newCommText","SetNewCommText","newCommDate","SetNewCommDate","onAddComm","Math","floor","getTime","onDeleteComm","commID","commObject","time","moment","format","ReadOnlyBucket","buttons","invoice","description","in","out","remaining","onDeleteBucket","onUnArchiveBucket","archived","onClickDelete","onClickUnarchive","faTrashRestore","ArchivePage","buckets","onBackToClientPage","restorable","bucketID","faArrowLeft","OwnerDisplay","SingleClientPage","addingNewBucket","setAddingNewBucket","editingClient","setEditingClient","viewingArchive","setViewingArchive","clientNote","setClientNote","Object","keys","constructor","lastupdated","autoCorrect","autoCapitalize","communication","ClientBlankPage","ClientPage","confirmed","setConfirmed","clientIDinurl","split","pop","newClient","noClient","cancelBtnText","fluid","Row","Col","xs","md","sm","overflow","SingleClientReadOnlyPage","onViewClientAdmin","ToAdminPage","ClientReadOnlyPage","PageNotFound","ReportBlankPage","ReportPieChart","chartData","clientName","formattedChartData","hasOwnProperty","x","y","viewBox","standalone","innerRadius","labelRadius","colorScale","textAnchor","fontSize","SingleReportPage","total","remainingCurrent","hoursarraylength","uuid","marginLeft","ReportPage","noClientSelected","SummaryPage","lastthreemonths","setLastthreemonths","clientSummaryData","currentMonth","endOf","thisMonth","lastMonth","subtract","twomonthsago","SummaryPageInfo","bucketRender","founduser","find","rowSpan","OwnerPage","capitalizeFirstLetter","uncapitalString","charAt","toUpperCase","slice","ownername","useSortBy","getSortByToggleProps","isSorted","isSortedDesc","App","exact","path","component","LandingPage","Boolean","hostname","match","localdata","JSON","parse","initialState","rootReducer","combineReducers","action","admins","currentuser","stringify","removeItem","store","createStore","applyMiddleware","ReduxThunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","LANDING","SIGN_UP","SIGN_IN","CLIENTS","CLIENTADMIN","REPORT","SUMMARY","OWNERS","NEW","ACCOUNT","ADMIN","LOGS"],"mappings":"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","file":"static/js/main.f4d665bd.chunk.js","sourcesContent":["import * as config from '../../constants/AppConstants';\nimport { BACKEND_URL } from '../../constants/AppConstants';\nimport axios from 'axios';\nimport * as ROUTES from '../../constants/routes';\nimport history from '../../components/Navigation/History';\nimport { SIGNED_OUT } from './Auth';\n\nexport const SET_CLIENTDATA = 'SET_CLIENTDATA';\nexport const SET_CLIENT_SUMMARY_DATA = 'SET_CLIENT_SUMMARY_DATA';\nexport const FETCH_CLIENT = 'FETCH_CLIENT';\nexport const REMOVE_CLIENT = 'REMOVE_CLIENT';\nexport const RESET_CLIENTDATA = 'RESET_CLIENTDATA';\n\nexport const getAuthConfig = (unencoded_token, content = true) => {\n  const access_token = Buffer.from(`${unencoded_token}:''`, 'utf8').toString('base64');\n  let authconfig = config.CONFIG_JSON_CONTENT;\n  if (content === false) {\n    authconfig = config.CONFIG_JSON;\n  }\n\n  authconfig.headers.Authorization = 'Basic ' + access_token;\n  return authconfig;\n};\n// Here we fetch all high level client data and put that into our redux state.\nexport const fetchClients = () => {\n  return async (dispatch, getState) => {\n    const authconfig = getAuthConfig(getState().auth.currentUser.access_token);\n    // Client fetching is one of the first things we do, so we can check here if we're signed in.\n    try {\n      const response = await axios.get(BACKEND_URL + 'clients', authconfig);\n      if (response.status !== 200) {\n        throw new Error('Didnt get 200 response when fetching clients');\n      }\n\n      dispatch({ type: SET_CLIENTDATA, clients: response.data });\n    } catch (error) {\n      if (error.response.status === 401) {\n        // We aren't authorized, and should be signed out and reset client data.\n        dispatch({ type: RESET_CLIENTDATA });\n        dispatch({ type: SIGNED_OUT });\n        history.push(ROUTES.SIGN_IN);\n      }\n    }\n  };\n};\n\n// Client Actions.\n// Here we fetch all individual client data from each table and put that into our redux state.\nexport const fetchClient = (clientid) => {\n  console.log('fetching client data all again for client ' + clientid);\n  return async (dispatch, getState) => {\n    const authConfig = getAuthConfig(getState().auth.currentUser.access_token, false);\n    // Collect all data to do with this client.\n    const responseClient = await axios.get(BACKEND_URL + 'clients/' + clientid, authConfig);\n    if (responseClient.status !== 200) {\n      throw new Error('Didnt get 200 response when fetching clients');\n    }\n\n    dispatch({ type: FETCH_CLIENT, activeClient: responseClient.data.client });\n  };\n};\n\nexport const removeActiveClient = () => {\n  return (dispatch, getState) => {\n    dispatch({ type: REMOVE_CLIENT });\n  };\n};\n// Here we fetch all clients, buckets, months data that have activity in the last numberOfMonths.\nexport const fetchClientSummary = (numberOfMonths) => {\n  return async (dispatch, getState) => {\n    const authconfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const response = await axios.get(BACKEND_URL + 'client/summary', authconfig);\n    if (response.status !== 200) {\n      throw new Error('Didnt get 200 response when fetching client summary data');\n    }\n\n    dispatch({ type: SET_CLIENT_SUMMARY_DATA, clients: response.data });\n  };\n};\n\nexport const updateClient = (clientid, clientData) => {\n  return async (dispatch, getState) => {\n    const authConfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const responseClient = await axios.put(BACKEND_URL + 'clients/' + clientid, clientData, authConfig);\n    if (responseClient.status !== 200) {\n      throw new Error('Didnt get 200 response when updating client ');\n    }\n    // Updated in backend. Fetch all client data again.\n    dispatch(fetchClient(clientid));\n  };\n};\n\nexport const deleteClient = (clientid) => {\n  return async (dispatch, getState) => {\n    const authConfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const responseClient = await axios.delete(BACKEND_URL + 'clients/' + clientid, authConfig);\n    if (responseClient.status !== 204) {\n      throw new Error('Didnt get 204 response when deleting client ');\n    }\n    // Updated in backend. Fetch all client data again.\n    history.push(ROUTES.CLIENTADMIN);\n  };\n};\n\nexport const createClient = (name) => {\n  return async (dispatch, getState) => {\n    const authConfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const clientdata = {\n      name: name,\n    };\n    const responseClient = await axios.post(BACKEND_URL + 'clients', clientdata, authConfig);\n    if (responseClient.status !== 201) {\n      throw new Error('Didnt get 201 response when creating client ');\n    }\n\n    history.push(ROUTES.CLIENTADMIN + '/' + responseClient.data.id);\n    return responseClient.data.id;\n  };\n};\n\n// Bucket Actions.\nexport const createBucket = (clientid, newbucketname) => {\n  return async (dispatch, getState) => {\n    const authConfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const data = {\n      clientid: clientid,\n      name: newbucketname,\n    };\n    const responseClient = await axios.post(BACKEND_URL + 'buckets', data, authConfig);\n    if (responseClient.status !== 200) {\n      throw new Error('Didnt get 200 response when creating bucket, got: ' + responseClient.status);\n    }\n    // Updated in backend. Fetch all client data again.\n    dispatch(fetchClient(clientid));\n  };\n};\n\nexport const deleteBucket = (bucket) => {\n  return async (dispatch, getState) => {\n    const authConfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const responseClient = await axios.delete(BACKEND_URL + 'buckets/' + bucket.id, authConfig);\n    if (responseClient.status !== 204) {\n      throw new Error('Didnt get 204 response when updating bucket name');\n    }\n\n    dispatch(fetchClient(bucket.clientid));\n  };\n};\n\nexport const updateBucket = (bucket, data) => {\n  return async (dispatch, getState) => {\n    const authConfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const responseClient = await axios.put(BACKEND_URL + 'buckets/' + bucket.id, data, authConfig);\n    if (responseClient.status !== 200) {\n      throw new Error('Didnt get 200 response when updating bucket name');\n    }\n    // Updated in backend. Fetch all client data again.\n    dispatch(fetchClient(bucket.clientid));\n  };\n};\n\nexport const addCommunication = (communications, newcommtext, date) => {\n  return async (dispatch, getState) => {\n    const authConfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const clientid = getState().clients.activeClient.id;\n    const data = {\n      note: newcommtext,\n      date: date,\n      clientid: clientid,\n    };\n    const responseClient = await axios.post(BACKEND_URL + 'communications', data, authConfig);\n    if (responseClient.status !== 201) {\n      throw new Error('Didnt get 201 response when creating communication record');\n    }\n    // Updated in backend. Fetch all client data again.\n    dispatch(fetchClient(clientid));\n  };\n};\n\nexport const deleteCommunication = (communications, commid) => {\n  return async (dispatch, getState) => {\n    const authConfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const clientid = getState().clients.activeClient.id;\n    const responseClient = await axios.delete(BACKEND_URL + 'communications/' + commid, authConfig);\n    if (responseClient.status !== 204) {\n      throw new Error('Didnt get 204 response when deleting communication record');\n    }\n    // Updated in backend. Fetch all client data again.\n    dispatch(fetchClient(clientid));\n  };\n};\n\n// Hours/Months Actions.\nexport const updateHoursData = (hoursid, column, newvalue) => {\n  return async (dispatch, getState) => {\n    const authConfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const clientid = getState().clients.activeClient.id;\n    let data = {};\n    data[column] = newvalue;\n    const responseClient = await axios.put(BACKEND_URL + 'hours/' + hoursid, data, authConfig);\n    if (responseClient.status !== 200) {\n      throw new Error('Didnt get 200 response when updating an hours record');\n    }\n    // Updated in backend. Fetch all client data again.\n    dispatch(fetchClient(clientid));\n  };\n};\n\nexport const deleteMonth = (hoursrecord) => {\n  return async (dispatch, getState) => {\n    const authConfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const clientid = getState().clients.activeClient.id;\n    const responseClient = await axios.delete(BACKEND_URL + 'hours/' + hoursrecord.id, authConfig);\n    if (responseClient.status !== 204) {\n      throw new Error('Didnt get 204 response when updating bucket name');\n    }\n\n    dispatch(fetchClient(clientid));\n  };\n};\n\nexport const createMonth = (bucket, date) => {\n  return async (dispatch, getState) => {\n    const authConfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const data = {\n      month: date.getMonth() + 1,\n      year: date.getFullYear(),\n      bucketid: bucket.id,\n    };\n    const responseClient = await axios.post(BACKEND_URL + 'hours', data, authConfig);\n    if (responseClient.status !== 200) {\n      throw new Error('Didnt get 200 response when creating an hours record');\n    }\n    // Updated in backend. Fetch all client data again.\n    dispatch(fetchClient(bucket.clientid));\n  };\n};\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();\n","export const BACKEND_URL = process.env.REACT_APP_API_URL || '/api/';\nexport const CONFIG_JSON = {\n  headers: {\n    Accept: 'application/json',\n  },\n};\nexport const CONFIG_JSON_CONTENT = {\n  headers: {\n    Accept: 'application/json',\n    'Content-type': 'application/json',\n  },\n};\n","import * as config from '../../constants/AppConstants';\nimport { BACKEND_URL } from '../../constants/AppConstants';\nimport axios from 'axios';\nimport { getAuthConfig } from './Clients';\n\nexport const SET_USERDATA = 'SET_USERDATA';\nexport const SIGNED_IN = 'SIGNED_IN';\nexport const SIGNED_OUT = 'SIGNED_OUT';\nexport const SIGNED_UP = 'SIGNED_UP';\n\n// Here we fetch all user data and put that into our redux state.\nexport const fetchUsers = () => {\n  return async (dispatch, getState) => {\n    const authconfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const response = await axios.get(BACKEND_URL + 'users', authconfig);\n    if (response.status !== 200) {\n      throw new Error('Didnt get 200 response when fetching users');\n    }\n\n    dispatch({ type: SET_USERDATA, users: response.data });\n  };\n};\n// Here we log in, and get back our token if successful.\nexport const signIn = (email, password) => {\n  return async (dispatch) => {\n    const data = {\n      email: email,\n      password: password,\n    };\n    // It is standard practice to send \"plaintext\" passwords over HTTPS.\n    // The passwords are ultimately not plaintext, since the client-server communication is encrypted as per TLS.\n    const response = await axios.post(BACKEND_URL + 'user/login', data, config.CONFIG_JSON);\n    if (response.status !== 200) {\n      throw new Error('Didnt get 200 response when signing in');\n    }\n\n    if (response.data.success === false) {\n      throw new Error(response.data.message);\n    }\n\n    dispatch({ type: SIGNED_IN, data: response.data });\n  };\n};\n\nexport const signOut = () => {\n  return async (dispatch) => {\n    dispatch({ type: SIGNED_OUT });\n  };\n};\n\nexport const signUp = (username, email, password) => {\n  return async (dispatch) => {\n    const data = {\n      username: username,\n      email: email,\n      password: password,\n    };\n    const response = await axios.post(BACKEND_URL + 'user/signup', data, config.CONFIG_JSON);\n    if (response.status !== 200) {\n      throw new Error('Didnt get 200 response when signing in');\n    }\n\n    if (response.data.success === false) {\n      throw new Error(response.data.message);\n    }\n    // Do a sign in after we sign up.\n    dispatch({ type: SIGNED_IN, data: response.data });\n  };\n};\n\nexport const updateRole = (userid, role) => {\n  return async (dispatch, getState) => {\n    const authconfig = getAuthConfig(getState().auth.currentUser.access_token);\n    const data = {\n      userid: userid,\n      role: role,\n    };\n    const response = await axios.post(BACKEND_URL + 'user/updaterole', data, authconfig);\n    if (response.status !== 200) {\n      throw new Error('Didnt get 200 response when updating a user role');\n    }\n    // Get all the user data to update their roles now that one has changed.\n    dispatch(fetchUsers());\n  };\n};\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport * as ROUTES from '../../constants/routes';\nimport * as authActions from '../../store/actions/Auth';\nimport { useDispatch } from 'react-redux';\n\nconst SignOutButton = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const signOut = async () => {\n    await dispatch(authActions.signOut());\n    history.push(ROUTES.SIGN_IN);\n  };\n\n  return (\n    <button className=\"btn btn-warning\" type=\"button\" onClick={signOut}>\n      Sign Out\n    </button>\n  );\n};\n\nexport default (SignOutButton);\n","export const SITENAME = 'Client Hours Logbook';\nexport const NOOWNER = 'NOOWNER';\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport SignOutButton from '../SignOut';\nimport * as ROUTES from '../../constants/routes';\nimport * as NAMES from '../../constants/names';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Container from 'react-bootstrap/Container';\nimport {useSelector} from 'react-redux';\n\nconst Navigation = () => {\n  const authUser = useSelector(state => state.auth.currentUser);\n  if (authUser === null || authUser === [] || authUser === undefined) {\n    return <NavigationNonAuth/>;\n  }\n\n  if (authUser.role === 3) {\n    return <NavigationAdminAuth authUser={authUser}/>;\n  }\n\n  if (authUser.role === 1) {\n    return <NavigationBasicAuth authUser={authUser}/>;\n  }\n\n  return <NavigationNonAuth/>;\n};\n\nconst NavigationAdminAuth = ({authUser}) => {\n  return (\n      <Navbar bg=\"primary\" expand=\"lg\" variant=\"dark\">\n        <Container style={{maxWidth: '85%'}}>\n          <Navbar.Brand to=\"/\">{NAMES.SITENAME}</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Link className=\"btn btn-danger ml-1 mr-1\"\n                    to={ROUTES.CLIENTADMIN}>\n                Client Admin\n              </Link>\n              <Link className=\"btn btn-danger ml-1 mr-1\" to={ROUTES.LOGS}>\n                Logs\n              </Link>\n              <Link className=\"btn btn-success ml-1 mr-1\" to={ROUTES.CLIENTS}>\n                View Clients\n              </Link>\n              <Link className=\"btn btn-success ml-1 mr-1\" to={ROUTES.REPORT}>\n                Reports\n              </Link>\n              <Link className=\"btn btn-success ml-1 mr-1\" to={ROUTES.SUMMARY}>\n                Client Summary\n              </Link>\n            </Nav>\n            <Navbar.Brand to=\"/\">You\n              are <strong>{authUser.username}</strong></Navbar.Brand>\n            <Link className=\"btn btn-primary\" to={ROUTES.ADMIN}>\n              Admin\n            </Link>\n            <Link className=\"btn btn-primary\" to={ROUTES.ACCOUNT}>\n              Account\n            </Link>\n            <SignOutButton/>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n  );\n};\n\nconst NavigationBasicAuth = ({authUser}) => (\n    <Navbar bg=\"primary\" variant=\"dark\">\n      <Navbar.Brand to=\"/\">{NAMES.SITENAME}</Navbar.Brand>\n      <Nav className=\"mr-auto\">\n        <Link className=\"btn btn-success ml-1 mr-1\" to={ROUTES.CLIENTS}>\n          Clients\n        </Link>\n        <Link className=\"btn btn-success ml-1 mr-1\" to={ROUTES.REPORT}>\n          Reports\n        </Link>\n        <Link className=\"btn btn-success ml-1 mr-1\" to={ROUTES.SUMMARY}>\n          Client Summary\n        </Link>\n      </Nav>\n      <Link className=\"btn btn-primary\" to={ROUTES.ACCOUNT}>\n        Account\n      </Link>\n      <SignOutButton/>\n    </Navbar>\n);\n\nconst NavigationNonAuth = () => (\n    <Navbar bg=\"primary\" variant=\"dark\">\n      <Navbar.Brand to=\"/\">{NAMES.SITENAME}</Navbar.Brand>\n      <Nav className=\"mr-auto\">\n        <Link className=\"btn btn-primary\" to={ROUTES.LANDING}>\n          Landing\n        </Link>\n        <Link className=\"btn btn-primary\" to={ROUTES.SIGN_IN}>\n          Sign In\n        </Link>\n      </Nav>\n    </Navbar>\n);\nexport default Navigation;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport * as ROUTES from \"../../constants/routes\";\nimport {useHistory} from \"react-router-dom\";\n\nconst Landing = () => {\n    const history = useHistory();\n    const authUser = useSelector(state => state.auth.currentUser);\n\n    if (authUser.role === 3 || authUser.role === 1) {\n        return <Auth authUser={authUser}/>;\n    }\n\n    if (window.location.pathname === ROUTES.LANDING) {\n        history.push(ROUTES.SIGN_IN);\n    }\n    return <NonAuth/>;\n};\n\nexport default Landing;\n\nconst NonAuth = () => {\n  return (\n    <div className=\"text-center mt-2\">\n      <h4>Please sign in</h4>\n    </div>\n  );\n};\n\nconst Auth = ({ authUser }) => {\n  return (\n    <div className=\"text-center mt-5\">\n      <h1>Hello <strong>{authUser.username}</strong></h1>\n      <h5>Use the links at the top to view client hours information.</h5>\n    </div>\n  );\n};\n","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport * as ROUTES from '../../constants/routes';\nimport { compose } from 'recompose';\nimport { useDispatch } from 'react-redux';\nimport * as authActions from '../../store/actions/Auth';\n\nconst SignUpPage = () => {\n  const dispatch = useDispatch();\n  return (\n    <div className=\"text-center\">\n      <h1 className=\"mt-2\">Sign Up</h1>\n      <SignUpForm dispatch={dispatch}/>\n      <p className=\"mt-3\">\n        Go back to <Link to={ROUTES.SIGN_IN}>Sign In</Link>\n      </p>\n    </div>\n  );\n};\n\nconst INITIAL_STATE = {\n  username: '',\n  email: '',\n  passwordOne: '',\n  passwordTwo: '',\n  error: null,\n};\n\nclass SignUpFormBase extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...INITIAL_STATE };\n  };\n\n  onSubmit = event => {\n    const { username, email, passwordOne } = this.state;\n    this.props.dispatch(authActions.signUp(username, email, passwordOne))\n      .then(authUser => {\n        this.setState({ ...INITIAL_STATE });\n        this.props.history.push(ROUTES.CLIENTS);\n      })\n      .catch(error => {\n        this.setState({ error });\n      });\n    event.preventDefault();\n  };\n\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  render() {\n    const {\n      username,\n      email,\n      passwordOne,\n      passwordTwo,\n      error,\n    } = this.state;\n    const isInvalid =\n      passwordOne !== passwordTwo ||\n      passwordOne === '' ||\n      email === '' ||\n      username === '';\n\n    return (\n      <div className=\"text-center\">\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-group\">\n            <input\n              name=\"username\"\n              value={username}\n              onChange={this.onChange}\n              type=\"text\"\n              placeholder=\"Full Name\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <input\n              name=\"email\"\n              value={email}\n              onChange={this.onChange}\n              type=\"text\"\n              placeholder=\"Email Address\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <input\n              name=\"passwordOne\"\n              value={passwordOne}\n              onChange={this.onChange}\n              type=\"password\"\n              placeholder=\"Password\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <input\n              name=\"passwordTwo\"\n              value={passwordTwo}\n              onChange={this.onChange}\n              type=\"password\"\n              placeholder=\"Confirm Password\"\n            />\n          </div>\n          <button className=\"btn btn-primary\" disabled={isInvalid} type=\"submit\">Sign Up</button>\n          {error && <p>{error.message}</p>}\n        </form>\n      </div>\n    );\n  }\n}\n\nconst SignUpLink = () => (\n  <p>\n    Don't have an account? <Link to={ROUTES.SIGN_UP}>Sign Up</Link>\n  </p>\n);\n\nconst DemoSignInLink = () => (\n  <p>\n    <Link to={ROUTES.SIGN_UP}>Sign in to Demo Admin Account</Link>\n  </p>\n);\n\nconst SignUpForm = compose(\n  withRouter,\n)(SignUpFormBase);\n\nexport default SignUpPage;\nexport {SignUpForm, SignUpLink, DemoSignInLink};\n","import React, {Component} from 'react';\nimport {withRouter} from 'react-router-dom';\nimport {compose} from 'recompose';\nimport * as ROUTES from '../../constants/routes';\nimport {connect} from 'react-redux';\nimport * as authActions from '../../store/actions/Auth';\nimport { BallTriangle } from 'react-loader-spinner'\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        signIn: (email, password) => dispatch(authActions.signIn(email, password)),\n    };\n};\n\nclass DemoSignInFormBase extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { isLoading: false };\n    }\n\n    onSubmit = event => {\n        this.setState({isLoading: true});\n        this.props.signIn(process.env.REACT_APP_ADMIN_USERNAME, process.env.REACT_APP_ADMIN_USERNAME).then(() => {\n            this.props.history.push(ROUTES.LANDING);\n        }).catch(error => {\n            this.setState({error});\n        })\n        event.preventDefault();\n    };\n\n    render() {\n        if (this.state.isLoading === true) {\n            return <BallTriangle height={100} width={100} radius={5} color=\"#4fa94d\" ariaLabel=\"ball-triangle-loading\" wrapperClass=\"d-block\" wrapperStyle=\"\" visible={true}/>;\n        }\n        return (\n            <div>\n                <form onSubmit={this.onSubmit}>\n                    <button className=\"btn btn-primary\" type=\"submit\">\n                        Use Demo Admin Account\n                    </button>\n                </form>\n                OR:\n            </div>\n        );\n    }\n}\n\nconst DemoSignInForm = compose(withRouter)(connect(null, mapDispatchToProps)(DemoSignInFormBase));\nexport {DemoSignInForm};\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\nimport { SignUpLink } from '../SignUp';\nimport { DemoSignInForm } from './DemoSignIn';\nimport * as ROUTES from '../../constants/routes';\nimport Landing from '../Landing';\nimport { connect } from 'react-redux';\nimport * as authActions from '../../store/actions/Auth';\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signIn: (email, password) => dispatch(authActions.signIn(email, password)),\n  };\n};\n\nconst SignInPage = props => (\n  <div className=\"text-center mt-3\">\n    {process.env.REACT_APP_ENVIRONMENT === 'demo' && <DemoSignInForm/>}\n    <Landing/>\n    <SignInForm/>\n    <SignUpLink/>\n\n  </div>\n);\nconst INITIAL_STATE = {\n  email: '',\n  password: '',\n  error: null,\n};\n\nclass SignInFormBase extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...INITIAL_STATE };\n  }\n\n  onSubmit = event => {\n    const { email, password } = this.state;\n    this.props.signIn(email, password).then(() => {\n      this.setState({ ...INITIAL_STATE });\n      this.props.history.push(ROUTES.LANDING);\n    })\n      .catch(error => {\n        this.setState({ error });\n      });\n    event.preventDefault();\n  };\n\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  render() {\n    const { email, password, error } = this.state;\n    const isInvalid = password === '' || email === '';\n    return (\n      <div className=\"mx-auto w-25 shadow p-3 mb-5 bg-white rounded\">\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-group\">\n            <input\n              name=\"email\"\n              value={email}\n              onChange={this.onChange}\n              type=\"text\"\n              placeholder=\"Email Address\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <input\n              name=\"password\"\n              value={password}\n              onChange={this.onChange}\n              type=\"password\"\n              placeholder=\"Password\"\n            />\n          </div>\n          <button className=\"btn btn-primary\" disabled={isInvalid} type=\"submit\">\n            Sign In\n          </button>\n          {error && <p>{error.message}</p>}\n        </form>\n      </div>\n    );\n  }\n}\n\nconst SignInForm = compose(withRouter)(connect(null, mapDispatchToProps)(SignInFormBase));\nexport default SignInPage;\nexport {SignInForm};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nconst AccountPage = () => {\n  const authUser = useSelector(state => state.auth.currentUser);\n  const role = authUser.role === 3 ? 'Admin' : 'Basic';\n  return (\n    <div>\n      <div className=\"text-center\">\n        <h3 className=\"mt-3\">Account: {authUser.email}</h3>\n        <hr/>\n        <h3>Username: {authUser.username}</h3>\n        <hr/>\n        <h3>Role: {role}</h3>\n      </div>\n    </div>\n  );\n};\n\nexport default (AccountPage);\n","import React, { useEffect, useState } from 'react';\nimport * as ROLES from '../../constants/roles';\nimport Tooltip from 'rc-tooltip/es';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLevelDownAlt, faLevelUpAlt } from '@fortawesome/free-solid-svg-icons';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as authActions from '../../store/actions/Auth';\n\nconst AdminPage = () => {\n  const dispatch = useDispatch();\n  const adminUsers = useSelector(state => state.auth.adminUsers);\n  const allUsers = useSelector(state => state.auth.users);\n  const [loading, setLoading] = useState(false);\n  const [basicUsers, setBasicUsers] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    if (allUsers.length === 0) {\n      dispatch(authActions.fetchUsers());\n    }\n\n    setBasicUsers(allUsers.filter((user) => user.role !== 3));\n    setLoading(false);\n  }, [dispatch, allUsers]);\n\n  return (\n    <div className=\"col-md-10 text-center\">\n      <h1>Admin Users (Read and write access)</h1>\n      {loading && <div>Loading ...</div>}\n      <UserList users={adminUsers} promote={false}/>\n      <h1>Basic Users (Read only access)</h1>\n      <UserList users={basicUsers} promote={true}/>\n    </div>\n  );\n};\n\nconst UserList = ({ users, promote }) => {\n  const dispatch = useDispatch();\n  const [confirmModal, setConfirmModal] = useState(null);\n\n  const giveNewRole = async (id, newRole) => {\n    await dispatch(authActions.updateRole(id, newRole));\n    console.log('Changed role of user with id: ' + id + ' to have role ' + newRole);\n    setConfirmModal(null);\n  };\n\n  const onClickAction = (id, newRole, alertType) => {\n    if (alertType === 'giveAdmin') {\n      const modal = (\n        <SweetAlert\n          success\n          showCancel\n          confirmBtnText=\"Yes\"\n          confirmBtnBsStyle=\"success\"\n          title=\"Are you sure?\"\n          onConfirm={() => giveNewRole(id, newRole)}\n          onCancel={() => setConfirmModal(null)}\n          focusCancelBtn={false}\n          focusConfirmBtn={false}\n        >\n          This will make this user an admin.\n        </SweetAlert>\n      );\n      setConfirmModal(modal);\n    } else {\n      const modal = (\n        <SweetAlert\n          warning\n          showCancel\n          confirmBtnText=\"Yes\"\n          confirmBtnBsStyle=\"warning\"\n          title=\"Are you sure?\"\n          onConfirm={() => giveNewRole(id, newRole)}\n          onCancel={() => setConfirmModal(null)}\n          focusCancelBtn={false}\n          focusConfirmBtn={false}\n        >\n          This will remove this user as an admin.\n        </SweetAlert>\n      );\n      setConfirmModal(modal);\n    }\n  };\n\n  if (!users) {\n    return (\n      <h5>No users in this category</h5>\n    );\n  }\n\n  return (\n    <div>\n      {confirmModal}\n      <table className=\"table\">\n        <thead className=\"theat-dark\">\n        <tr>\n          <th scope=\"col\">UserId</th>\n          <th scope=\"col\">Email</th>\n          <th scope=\"col\">Username</th>\n          <th scope=\"col\">Action</th>\n        </tr>\n        </thead>\n        <tbody>\n        {users.map(user => (\n          <tr key={user.id}>\n            <td>{user.id}</td>\n            <td>{user.email}</td>\n            <td>{user.username}</td>\n            {!promote && (\n              <td>\n                <Tooltip\n                  placement=\"right\"\n                  mouseEnterDelay={0.5}\n                  mouseLeaveDelay={0.1}\n                  trigger=\"hover\"\n                  overlay={<div>Demote</div>}\n                >\n                  <button onClick={() => onClickAction(user.id, ROLES.BASIC, 'removeAdmin')}\n                          className=\"btn btn-secondary m-1\" type=\"submit\">\n                    <FontAwesomeIcon style={{ cursor: 'pointer' }} icon={faLevelDownAlt}/>\n                  </button>\n                </Tooltip>\n              </td>\n            )}\n            {promote &&\n            <td>\n              <Tooltip\n                placement=\"right\"\n                mouseEnterDelay={0.5}\n                mouseLeaveDelay={0.1}\n                trigger=\"hover\"\n                overlay={<div>Promote</div>}\n              >\n                <button onClick={() => onClickAction(user.id, ROLES.ADMIN, 'giveAdmin')}\n                        className=\"btn btn-secondary m-1\" type=\"submit\">\n                  <FontAwesomeIcon style={{ cursor: 'pointer' }} icon={faLevelUpAlt}/>\n                </button>\n              </Tooltip>\n            </td>\n            }\n          </tr>\n        ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default (AdminPage);\n","export const ADMIN = 'ADMIN';\nexport const BASIC = 'BASIC';\n","import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport axios from 'axios';\nimport { BACKEND_URL } from '../../constants/AppConstants';\nimport { getAuthConfig } from '../../store/actions/Clients';\nimport Pagination from \"react-js-pagination\";\nconst DEFAULT_PAGE_SIZE = 20;\n\nconst LogsPage = () => {\n  const access_token = useSelector((state => state.auth.currentUser.access_token));\n  const [logs, setLogs] = useState([]);\n  const [page, setPage] = useState(1);\n  const [perpage, setperpage] = useState(DEFAULT_PAGE_SIZE);\n  const [totalitemsCount, setTotalitemsCount] = useState(20);\n\n  const fetchLogs = async (pageNumber, pagesize = perpage) => {\n    if (pageNumber === undefined) {\n      return;\n    }\n    const authconfig = getAuthConfig(access_token);\n    const response = await axios.get(BACKEND_URL + 'logs?sort=-log_time&page=' + pageNumber + '&per-page=' + pagesize, authconfig);\n    if (response.status !== 200) {\n      throw new Error('Didnt get 200 response when fetching users');\n    }\n    setTotalitemsCount(parseInt(response.headers['x-pagination-total-count']));\n    setperpage(parseInt(response.headers['x-pagination-per-page']));\n    setPage(pageNumber);\n    setLogs(response.data);\n  };\n\n  const onClickPerPage = (newpagelimit) => {\n    if (newpagelimit > 0 && newpagelimit <= 1000) {\n      fetchLogs(page, newpagelimit);\n    }\n  }\n\n  const PageLimitSetter = () => {\n    // Make the currently selected page size shown as active with a success button.\n    return (\n      <div>\n        <h5>Logs per page</h5>\n        <button onClick={() => onClickPerPage(DEFAULT_PAGE_SIZE)}\n                className={\"btn m-1 \" + (perpage === DEFAULT_PAGE_SIZE ? 'btn-success' : 'btn-secondary')}\n                type=\"submit\">\n          {DEFAULT_PAGE_SIZE}\n        </button>\n        <button onClick={() => onClickPerPage(50)}\n                className={\"btn m-1 \" + (perpage === 50 ? 'btn-success' : 'btn-secondary')}\n                type=\"submit\">\n          50\n        </button>\n        <button onClick={() => onClickPerPage(100)}\n                className={\"btn m-1 \" + (perpage === 100 ? 'btn-success' : 'btn-secondary')}\n                type=\"submit\">\n          100\n        </button>\n        <button onClick={() => onClickPerPage(1000)}\n                className={\"btn m-1 \" + (perpage === 1000 ? 'btn-success' : 'btn-secondary')}\n                type=\"submit\">\n          1000\n        </button>\n      </div>\n    );\n  }\n\n  useEffect(() => {\n    // Going to fetch the logs on each render of this page. No dispatch or redux state updated.\n    fetchLogs(1, DEFAULT_PAGE_SIZE).then(() => console.log('fetched logs'));\n  }, []); //eslint-disable-line\n\n  if (logs.length === 0) {\n    return (\n      <div className=\"col-md-10 text-center\">\n        <h1>Loading logs...</h1>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"text-center\">\n      <h1>Logs</h1>\n      <table style={{ width: '95%' }}>\n        <thead>\n        <tr style={{ borderBottom: '1px solid black' }}>\n          <th style={{ minWidth: '250px' }}>Date</th>\n          <th>Category</th>\n          <th>Message</th>\n        </tr>\n        </thead>\n        <tbody>\n        {logs.map(log => {\n          return (\n            <tr className=\"text-left\" key={log.id}>\n              <td className=\"logtablecell\">{log.date}</td>\n              <td className=\"logtablecell\">{log.category}</td>\n              <td className=\"logtablecell\">{log.message}</td>\n            </tr>\n          );\n        })}\n        </tbody>\n      </table>\n      <div>\n        <Pagination\n          activePage={page}\n          itemsCountPerPage={perpage}\n          totalItemsCount={totalitemsCount}\n          pageRangeDisplayed={5}\n          onChange={fetchLogs}\n          itemClass=\"page-item\"\n          linkClass=\"page-link\"\n        />\n        <PageLimitSetter/>\n      </div>\n    </div>\n  );\n};\n\nexport default (LogsPage);\n","import React, {useEffect, useRef, useState} from \"react\";\nimport {Dropdown, DropdownButton, Nav} from \"react-bootstrap\";\nimport {useHistory} from \"react-router-dom\";\nimport * as ROUTES from \"../../constants/routes\";\nimport {NOOWNER} from \"../../constants/names\";\nimport {useSelector} from 'react-redux';\nimport { BallTriangle } from 'react-loader-spinner'\n\nconst Sidebar = () => {\n  const _isMounted = useRef(true); // Initial value _isMounted = true\n  const [filterUserId, setFilterUser] = useState();\n  const clientList = useSelector(state => state.clients.clients);\n  const adminUsers = useSelector(state => state.auth.adminUsers);\n\n  // Need this to do a ComponentWillUnmount and cleanup memory leaks.\n  useEffect(() => {\n    let filterUser = localStorage.getItem('filterUserId');\n    if (filterUser !== undefined && filterUser !== null && filterUser !== '') {\n      // Make sure the id is an int.\n      if (filterUser !== NOOWNER) {\n        filterUser = parseInt(filterUser);\n      }\n      setFilterUser(filterUser);\n    }\n    // ComponentWillUnmount in Class Component\n    return () => {\n      _isMounted.current = false;\n    }\n  }, []);\n\n  const Filter = () => {\n    const onFilterClicked = (id) => {\n      localStorage.setItem('filterUserId', id);\n      setFilterUser(id);\n    }\n    return (\n      <DropdownButton id=\"dropdown-basic-button\" variant=\"secondary\" className=\"m-3 text-center\" title=\"Filter by owner\" size=\"sm\">\n        <Dropdown.Item onClick={() => onFilterClicked('')}>\n          Reset\n        </Dropdown.Item>\n        <Dropdown.Divider/>\n        {adminUsers && adminUsers.map(user => (\n          <Dropdown.Item key={user.id} onClick={() => onFilterClicked(user.id)}>\n            {user.username}\n          </Dropdown.Item>\n        ))}\n        <Dropdown.Item onClick={() => onFilterClicked(NOOWNER)}>\n          No owner\n        </Dropdown.Item>\n      </DropdownButton>\n    );\n  };\n\n  const filteringText = () => {\n    if (filterUserId === NOOWNER) {\n      return (\n        <div className=\"text-center\">\n          <em>Clients with no owner</em>\n        </div>\n      );\n    }\n    if (adminUsers.length === 0) {\n      return true;\n    }\n    const filteredUser = adminUsers.filter(user => user.id === filterUserId)[0];\n    if (!filteredUser) {\n      return true;\n    }\n    return (\n      <div className=\"text-center\">\n        <em>Filtering by {filteredUser.username}</em>\n      </div>\n    );\n  }\n\n  const history = useHistory();\n\n  // This function tells us which 'section' we're in, admin, viewing, or reports.\n  const getSection = () => {\n    let section = ROUTES.CLIENTS;\n    if (window.location.pathname.substr(0, ROUTES.REPORT.length) === ROUTES.REPORT) {\n      section = ROUTES.REPORT;\n    }\n    if (window.location.pathname.substr(0, ROUTES.CLIENTADMIN.length) === ROUTES.CLIENTADMIN) {\n      section = ROUTES.CLIENTADMIN;\n    }\n    return section;\n  }\n\n  const onClientChanged = (client) => {\n    history.push(getSection() + \"/\" + client.id);\n  }\n\n  const onViewAllClientsAndOwners = () => {\n    history.push(ROUTES.OWNERS);\n  }\n  const onAddNewClientClicked = () => {\n    history.push(ROUTES.CLIENTADMIN + \"/new\");\n  }\n  const AddNewClientLink = () => {\n    return (\n      <Nav.Item>\n        <Nav.Link onClick={() => onAddNewClientClicked()}>\n          Add new client\n        </Nav.Link>\n      </Nav.Item>\n    );\n  }\n  return (\n    <>\n      <Nav className=\"col-sm-12 d-md-block bg-light sidebar\"\n           activeKey=\"/home\"\n           onSelect={selectedKey => alert(`selected ${selectedKey}`)}\n      >\n        <Filter/>\n        {filterUserId && filteringText()}\n        <hr/>\n        <div className=\"sidebar-sticky\"/>\n        {clientList.length === 0 && <BallTriangle height={100} width={100} radius={5} color=\"#4fa94d\" ariaLabel=\"ball-triangle-loading\" wrapperClass=\"\" wrapperStyle=\"\" visible={true}/>}\n        {clientList && clientList.filter(client => {\n          if (filterUserId === NOOWNER) {\n            // Return clients that don't have an owner set.\n            return client.ownerid === null || client.ownerid === undefined;\n          }\n          if (filterUserId) {\n            return client.ownerid === filterUserId;\n          }\n          return true;\n        }).map(client => {\n          return (\n            <Nav.Item key={client.id}>\n              <Nav.Link onClick={() => onClientChanged(client)}>{client.name}</Nav.Link>\n            </Nav.Item>\n          );\n        })}\n        <Nav.Item>\n          <Nav.Link onClick={() => onViewAllClientsAndOwners()}>All clients and owners</Nav.Link>\n        </Nav.Item>\n        {getSection() === ROUTES.CLIENTADMIN && <AddNewClientLink/>}\n      </Nav>\n    </>\n  );\n};\nexport default Sidebar;\n","import React from 'react';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport * as clientActions from '../../store/actions/Clients';\n\nconst NewClientForm = () => {\n  const dispatch = useDispatch();\n  return (\n<div className=\"col-8\">\n      <h1>New client</h1>\n      <Formik\n        initialValues={{ name: '' }}\n        validationSchema={Yup.object({\n          name: Yup.string().required('Required to enter a name'),\n        })}\n        onSubmit={async (values, { setSubmitting }) => {\n          setSubmitting(true);\n          dispatch(clientActions.removeActiveClient());\n          const clientId = await dispatch(clientActions.createClient(values.name));\n          await dispatch(clientActions.fetchClients());\n          await dispatch(clientActions.fetchClient(clientId));\n        }}\n      >\n        {props => {\n          const {\n            handleSubmit,\n            isSubmitting,\n          } = props;\n          return (\n            <Form className=\"col-12 text-center container\" onSubmit={handleSubmit}>\n              <div className=\"form-group\">\n                <Field\n                  className=\"form-control col-12 m-1\"\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Name of client\"\n                />\n                <ErrorMessage name=\"name\"/>\n              </div>\n              <button\n                className=\"btn btn-primary m-1\"\n                type=\"submit\"\n                disabled={isSubmitting}\n              >\n                Submit\n              </button>\n            </Form>\n          );\n        }}\n      </Formik>\n    </div>\n  );\n};\n\nexport default (NewClientForm);\n","import React from 'react';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport * as clientActions from '../../store/actions/Clients';\n\nconst AddBucketForm = ({ clientID, onFinishSubmission, cancelForm }) => {\n  const dispatch = useDispatch();\n  return (\n\n\n\n<div className=\"col-10\">\n      <h1>New bucket</h1>\n      <Formik\n        initialValues={{ name: '' }}\n        validationSchema={Yup.object({\n          name: Yup.string().required('Required to enter a name'),\n        })}\n        onSubmit={async (values, { setSubmitting }) => {\n          setSubmitting(true);\n          await dispatch(clientActions.createBucket(clientID, values.name));\n          setSubmitting(false);\n          onFinishSubmission();\n        }}\n      >\n        {props => {\n          const {\n            handleSubmit,\n            isSubmitting,\n          } = props;\n          return (\n            <Form className=\"col-10 text-center container\" onSubmit={handleSubmit}>\n              <div className=\"form-group\">\n                <Field\n                  className=\"form-control col-12 m-1\"\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Name of bucket\"\n                />\n                <ErrorMessage name=\"name\"/>\n              </div>\n              <button\n                className=\"btn btn-primary m-1\"\n                type=\"submit\"\n                disabled={isSubmitting}\n              >\n                Submit\n              </button>\n            </Form>\n          );\n        }}\n      </Formik>\n      <button onClick={onFinishSubmission} className=\"btn btn-danger m-1\" type=\"submit\">Cancel</button>\n    </div>\n  );\n};\n\nexport default AddBucketForm;\n","import React, { useState } from 'react';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as clientActions from '../../store/actions/Clients';\n\nconst EditClientForm = ({ clientData, onFinishSubmission, onDeleteClient, owner }) => {\n  const [confirmModal, setConfirmModal] = useState(null);\n  const adminusers = useSelector(state => state.auth.adminUsers);\n  const dispatch = useDispatch();\n\n  const onClickDeleteClient = () => {\n    const modal = (\n      <SweetAlert\n        danger\n        showCancel\n        confirmBtnText=\"Yes, delete it!\"\n        confirmBtnBsStyle=\"danger\"\n        title=\"Are you sure?\"\n        onConfirm={() => onDeleteClient()}\n        onCancel={() => setConfirmModal(null)}\n        focusCancelBtn={false}\n        focusConfirmBtn={false}\n      >\n        You will not be able to recover any data for this client!\n      </SweetAlert>\n    );\n    setConfirmModal(modal);\n  };\n\n  return (\n\n\n\n<div className=\"col-10\">\n      <h1>Edit Client {clientData.name}</h1>\n      {confirmModal}\n      <Formik\n        initialValues={{ name: clientData.name, support: clientData.support, owner: owner }}\n        validationSchema={Yup.object({\n          name: Yup.string().required('Required to enter a name'),\n        })}\n        onSubmit={(values, { setSubmitting }) => {\n          setSubmitting(true);\n          const updatedata = {\n            name: values.name,\n            support: values.support,\n          };\n          if (typeof values.owner === 'string' && values.owner !== '') {\n            if (values.owner !== '0') {\n              updatedata['ownerid'] = Number(values.owner);\n            } else {\n              updatedata['ownerid'] = null;\n            }\n          }\n\n          dispatch(clientActions.updateClient(clientData.id, updatedata));\n          setSubmitting(false);\n          onFinishSubmission();\n        }}\n      >\n        {props => {\n          const {\n            handleSubmit,\n            isSubmitting,\n          } = props;\n          return (\n            <Form className=\"col-10 text-center container\" onSubmit={handleSubmit}>\n              <div className=\"form-group row\">\n                <label htmlFor=\"name\" className=\"m-1 mt-2\">Client Name</label>\n                <Field\n                  className=\"form-control col-8 m-1\"\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder={clientData.name}\n                />\n                <ErrorMessage name=\"name\"/>\n              </div>\n              <div className=\"form-group row\">\n                <label htmlFor=\"support\" className=\"m-1 mt-2\">Support hours per month</label>\n                <Field\n                  className=\"form-control col-8 m-1\"\n                  type=\"text\"\n                  name=\"support\"\n                  placeholder={clientData.support}\n                />\n              </div>\n              <div className=\"form-group row\">\n                <label htmlFor=\"owner\" className=\"m-1 mt-2\">Set Owner</label>\n                <Field as=\"select\"\n                       name=\"owner\"\n                       style={{ display: 'block' }}\n                >\n                  {adminusers && adminusers.map(user => <option key={user.id} value={user.id} label={user.username}/>)}\n                  <option value={0} label=\"No owner\"/>\n                </Field>\n              </div>\n              <button\n                className=\"btn btn-primary m-1\"\n                type=\"submit\"\n                disabled={isSubmitting}\n              >\n                Submit\n              </button>\n            </Form>\n          );\n        }}\n      </Formik>\n      <button onClick={onFinishSubmission} className=\"btn btn-secondary m-1\" type=\"submit\">Cancel</button>\n      <button onClick={() => onClickDeleteClient()} className=\"btn btn-danger m-1\" type=\"submit\">Delete client</button>\n    </div>\n  );\n};\n\nexport default EditClientForm;\n","import React, { useEffect, useState } from 'react';\nimport { useTable } from 'react-table';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nconst BucketTable = ({ data, updateData, onRemoveMonth, readOnly }) => {\n  // Create an editable cell renderer\n  const EditableCell = ({\n                          value: initialValue,\n                          row: { values },\n                          column: { id },\n                          updateMyData,\n                        }) => {\n    if (initialValue === null) {\n      initialValue = '';\n    }\n\n    // We need to keep and update the state of the cell normally\n    const [value, setValue] = useState(initialValue);\n    const onChange = e => {\n      setValue(e.target.value);\n    };\n\n    // We'll only update the external data when the input is blurred.\n    const onBlur = () => updateMyData(values, id, value);\n\n    // If the initialValue is changed external, sync it up with our state.\n    useEffect(() => {\n      setValue(initialValue);\n    }, [initialValue]);\n    let width = '150px';\n    if (id === 'in' || id === 'out') {\n      width = '60px';\n    }\n\n    return <input value={value} onChange={onChange} onBlur={onBlur} style={{ width: width }}/>;\n  };\n\n  // Create a non editable cell renderer\n  const NonEditableCell = ({ cell }) => {\n    if (cell.value !== 0 && !cell.value) {\n      return null;\n    }\n\n    if (cell.column.id === 'remaining' && cell.value % 1 !== 0) {\n      // Make sure the remaining column only displays values to 2 decimal places maximum.\n      return cell.value.toFixed(2);\n    }\n\n    return cell.value;\n  };\n\n  // When rendering months, we convert the integer to the human readable month name.\n  const NonEditableCellMonth = ({ cell }) => {\n    if (!cell.value) {\n      return null;\n    }\n\n    return new Date(2020, cell.value - 1, 15).toLocaleString('default', { month: 'long' });\n  };\n\n  // Create an editable cell renderer\n  const EditMultiline = ({\n                           value: initialValue,\n                           row: { values },\n                           column: { id },\n                           updateMyData,\n                         }) => {\n    // We need to keep and update the state of the cell normally\n    if (initialValue === null) {\n      initialValue = '';\n    }\n\n    const [value, setValue] = useState(initialValue);\n    const onChange = e => {\n      setValue(e.target.value);\n    };\n\n    // We'll only update the external data when the input is blurred\n    const onBlur = () => updateMyData(values, id, value);\n\n    // If the initialValue is changed external, sync it up with our state\n    useEffect(() => {\n      setValue(initialValue);\n    }, [initialValue]);\n    return <textarea\n      className=\"form-control\"\n      onChange={onChange}\n      onBlur={onBlur}\n      value={value}\n      placeholder=\"Write a description\"\n      style={{ height: '2.5rem' }}\n    />;\n  };\n\n  // Set our editable cell renderer as the default Cell renderer\n  const defaultColumn = {\n    Cell: EditableCell,\n    NonEditCell: NonEditableCell,\n    NonEditCellMonth: NonEditableCellMonth,\n    EditMultiline: EditMultiline,\n  };\n\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n  const updateMyData = (values, column, value) => {\n    const currentmonth = data.filter(hour => (hour.month === values.month && hour.year === values.year))[0];\n    if (currentmonth === undefined || !currentmonth) {\n      console.log('trying to update a month that could not be found! - this should not be possible!');\n      return;\n    }\n\n    if (currentmonth[column] === value || (value === '' && currentmonth[column] === null)) {\n      console.log('no need to update, nothing changed');\n      return;\n    }\n\n    updateData(currentmonth.id, column, value);\n  };\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Month',\n        accessor: 'month',\n      },\n      {\n        Header: 'Year',\n        accessor: 'year',\n      },\n      {\n        Header: 'Invoice',\n        accessor: 'invoice',\n      },\n      {\n        Header: 'Description',\n        accessor: 'description',\n      },\n      {\n        Header: 'In',\n        accessor: 'in',\n      },\n      {\n        Header: 'Out',\n        accessor: 'out',\n      },\n      {\n        Header: 'Balance',\n        accessor: 'remaining',\n      },\n    ],\n    []\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    updateMyData,\n  });\n  const styleTable = {\n    borderBottom: 'solid 3px red',\n    background: 'aliceblue',\n    color: 'black',\n    fontWeight: 'bold',\n  };\n\n  return (\n    <table {...getTableProps()} style={{ border: 'solid 1px black', width: '98%' }}>\n      <thead>\n      {headerGroups.map(headerGroup => (\n        <tr {...headerGroup.getHeaderGroupProps()}>\n          {headerGroup.headers.map(column => (\n            <th\n              {...column.getHeaderProps()}\n              style={styleTable}\n            >\n              {column.render('Header')}\n            </th>\n          ))}\n          {!readOnly && <th style={styleTable}>Action</th>}\n        </tr>\n      ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n      {rows.map(row => {\n        prepareRow(row);\n        let rowColourTouchable = 'rowTouched';\n        if (row.original.touched !== 1) {\n          rowColourTouchable = 'rowNotTouched';\n        }\n\n        return (\n          <tr {...row.getRowProps()} className={rowColourTouchable}>\n            {row.cells.map(cell => {\n              if (cell.column.id === 'month') {\n                return (\n                  <td {...cell.getCellProps()} className=\"bucketcell\">\n                    {cell.render('NonEditCellMonth')}\n                  </td>\n                );\n              }\n\n              if ((cell.column.id === 'year' || cell.column.id === 'remaining') || readOnly === true) {\n                return (\n                  <td {...cell.getCellProps()} className=\"bucketcell\">\n                    {cell.render('NonEditCell')}\n                  </td>\n                );\n              }\n\n              if (cell.column.id === 'description') {\n                return (\n                  <td {...cell.getCellProps()} className=\"bucketcell\" style={{ width: '400px' }}>\n                    {cell.render('EditMultiline')}\n                  </td>\n                );\n              }\n\n              return (\n                <td {...cell.getCellProps()} className=\"bucketcell\">\n                  {cell.render('Cell')}\n                </td>\n              );\n            })}\n            {!readOnly && rows.length > 1 && <td>\n              <button onClick={() => onRemoveMonth(row.original)} className=\"btn btn-secondary m-1\" type=\"submit\">\n                <FontAwesomeIcon style={{ cursor: 'pointer' }} icon={faTrash}/>\n              </button>\n            </td>}\n          </tr>\n        );\n      })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default BucketTable;\n","import React from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nconst MonthPicker = ({ handleChangeMonth, displayDate }) => {\n  return (\n    <DatePicker\n      selected={displayDate}\n      onChange={handleChangeMonth}\n      dateFormat=\"MM/yyyy\"\n      showMonthYearPicker\n    />\n  );\n};\n\nexport default MonthPicker;\n","import React, { useEffect, useRef, useState } from 'react';\nimport BucketTable from './bucketTable';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArchive, faCheck, faMoneyBill, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport ContentEditable from 'react-contenteditable';\nimport stripHtml from 'string-strip-html';\nimport Tooltip from 'rc-tooltip';\nimport 'rc-tooltip/assets/bootstrap.css';\nimport MonthPicker from './MonthPicker';\n\nconst Bucket = ({ bucket, onArchiveBucket, onRemoveMonth, onAddMonth, handleOnUpdateHoursData, onClickMarkPrepaid, handleUpdateBucketName }) => {\n  const _isMounted = useRef(true); // Initial value _isMounted = true\n  const [confirmModal, setConfirmModal] = useState(null);\n  const [newMonth, SetNewMonth] = useState(new Date());\n\n  // Need this to do a componentwillunmount and cleanup memory leaks.\n  useEffect(() => {\n    // ComponentWillUnmount in Class Component\n    return () => {\n      _isMounted.current = false;\n    };\n  }, []);\n\n  const onClickArchive = (bucketData) => {\n    const modal = (\n      <SweetAlert\n        warning\n        showCancel\n        confirmBtnText=\"Yes, archive it!\"\n        confirmBtnBsStyle=\"warning\"\n        title=\"Are you sure?\"\n        onConfirm={() => onArchiveBucket(bucketData)}\n        onCancel={() => setConfirmModal(null)}\n        focusCancelBtn={false}\n        focusConfirmBtn={false}\n      >\n        This will archive the bucket. It won't appear on the main page or in reports.\n        You can undo this action later.\n      </SweetAlert>\n    );\n    setConfirmModal(modal);\n  };\n\n  const text = useRef(bucket.name);\n  const bucketNameUpdated = (e) => {\n    text.current = stripHtml(e.target.value);\n  };\n\n  const updateBucketName = async () => {\n    // Only update if the name was actually changed.\n    if (text.current === bucket.name) {\n      console.log('bucket name unchanged, not updating');\n      return;\n    }\n\n    await handleUpdateBucketName(bucket, { name: text.current });\n  };\n\n  const handleChangeMonth = date => {\n    SetNewMonth(date);\n  };\n\n  return (\n    <div>\n      <h5 className='ml-3'>\n        <ContentEditable\n          html={text.current}\n          onChange={bucketNameUpdated}\n          onBlur={updateBucketName}\n          spellCheck={false}\n        />\n      </h5>\n      {confirmModal}\n      <div className=\"float-left row\">\n        <div className=\"col-7 mt-2\">\n          <MonthPicker handleChangeMonth={handleChangeMonth} displayDate={newMonth}/>\n        </div>\n        <Tooltip\n          placement=\"left\"\n          mouseEnterDelay={0.5}\n          mouseLeaveDelay={0.1}\n          trigger=\"hover\"\n          overlay={<div>Add month</div>}\n        >\n          <button onClick={() => onAddMonth(bucket, newMonth)} className=\"btn btn-success m-1 ml-5 float-left\"\n                  type=\"submit\">\n            <FontAwesomeIcon style={{ cursor: 'pointer' }} icon={faPlus}/>\n          </button>\n        </Tooltip>\n        <Tooltip\n          placement=\"right\"\n          mouseEnterDelay={0.5}\n          mouseLeaveDelay={0.1}\n          trigger=\"hover\"\n          overlay={<div>Archive bucket</div>}\n        >\n          <button onClick={() => onClickArchive(bucket)} className=\"btn btn-warning m-1 float-left\" type=\"submit\">\n            <FontAwesomeIcon style={{ cursor: 'pointer' }} icon={faArchive}/>\n          </button>\n        </Tooltip>\n      </div>\n      <Tooltip\n        placement=\"right\"\n        mouseEnterDelay={0.5}\n        mouseLeaveDelay={0.1}\n        trigger=\"hover\"\n        overlay={<div>Mark bucket as prepaid</div>}\n      >\n        <button onClick={() => onClickMarkPrepaid(bucket)} className=\"btn btn-info m-1 mr-3 float-right\" type=\"submit\">\n          <FontAwesomeIcon style={{ cursor: 'pointer' }} icon={faMoneyBill}/>\n        </button>\n      </Tooltip>\n\n      {bucket.prepaid === 1 && (\n        <Tooltip\n          placement=\"right\"\n          mouseEnterDelay={0.5}\n          mouseLeaveDelay={0.1}\n          trigger=\"hover\"\n          overlay={<div>This bucket is marked as prepaid</div>}\n        >\n          <button className=\"btn btn-success m-1 float-right\" type=\"submit\">\n            <FontAwesomeIcon style={{ cursor: 'pointer' }} icon={faCheck}/>\n          </button>\n        </Tooltip>\n      )}\n      <BucketTable data={bucket.hours} updateData={handleOnUpdateHoursData} onRemoveMonth={onRemoveMonth}/>\n    </div>\n  );\n};\n\nexport default Bucket;\n","import React from 'react';\n\nconst MonthlySupportHours = ({ activeClient }) => {\n  return (\n    <div>\n      {activeClient.support && <h5>{activeClient.support}</h5>}\n      {!activeClient.support && <h5>{activeClient.name} has no support hours data set.</h5>}\n    </div>\n  );\n};\n\nexport default MonthlySupportHours;\n","import React from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nconst DatePickerComms = ({ handleChangeDate, displayDate }) => {\n  return (\n    <DatePicker\n      selected={displayDate}\n      onChange={handleChangeDate}\n    />\n  );\n};\n\nexport default DatePickerComms;\n","import React, { useEffect, useRef, useState } from 'react';\nimport DatePickerComms from './DatePickerComms';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faTrash } from '@fortawesome/free-solid-svg-icons';\nimport moment from 'moment';\nimport Tooltip from 'rc-tooltip';\nimport 'rc-tooltip/assets/bootstrap.css';\nimport * as clientActions from '../../store/actions/Clients';\nimport { useDispatch } from 'react-redux';\n\nconst Communications = ({ clientID, clientComms, editable }) => {\n  const [newCommText, SetNewCommText] = useState('');\n  const [newCommDate, SetNewCommDate] = useState(new Date());\n  const _isMounted = useRef(true); // Initial value _isMounted = true\n  const dispatch = useDispatch();\n\n  // Need this to do a componentwillunmount and cleanup memory leaks.\n  useEffect(() => {\n    // ComponentWillUnmount in Class Component\n    return () => {\n      _isMounted.current = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    // Reset state when switching clients.\n    SetNewCommText('');\n    SetNewCommDate(new Date());\n  }, [clientID]);\n\n  const onNewCommChangeText = (e) => {\n    SetNewCommText(e.target.value);\n  };\n\n  const handleChangeDate = date => {\n    SetNewCommDate(date);\n  };\n\n  const onAddComm = async () => {\n    const date = Math.floor(newCommDate.getTime() / 1000); // Unix timestamp.\n    await dispatch(clientActions.addCommunication(clientComms, newCommText, date));\n    console.log('stored a new communication with text ' + newCommText + date);\n  };\n\n  const onDeleteComm = async (commID) => {\n    await dispatch(clientActions.deleteCommunication(clientComms, commID));\n    console.log('removed a communication with id ' + commID);\n  };\n\n  return (\n    <div className=\"container-fluid\">\n      <h5>Communications notes</h5>\n      {editable && (\n        <div>\n          <div className=\"col-2\" style={{ width: '50px' }}>\n            <DatePickerComms handleChangeDate={handleChangeDate} displayDate={newCommDate}/>\n          </div>\n          <div className=\"col-8\">\n            <div className=\"form-group row text-center\">\n              <input className=\"form-control m-1\"\n                     placeholder=\"Your text here\"\n                     value={newCommText}\n                     onChange={onNewCommChangeText}\n              />\n              <Tooltip\n                placement=\"right\"\n                mouseEnterDelay={0.5}\n                mouseLeaveDelay={0.1}\n                trigger=\"hover\"\n                overlay={<div>Add comms record</div>}\n              >\n                <button onClick={() => onAddComm()} className=\"btn btn-success m-1\" type=\"submit\">\n                  <FontAwesomeIcon style={{ cursor: 'pointer' }} icon={faPlus}/>\n                </button>\n              </Tooltip>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <table style={{ border: 'solid 1px black', width: '98%' }}>\n        <thead>\n        <tr style={{\n          borderBottom: 'solid 3px red',\n          background: 'aliceblue',\n          color: 'black',\n          fontWeight: 'bold',\n        }}>\n          <th>Date</th>\n          <th>Note</th>\n        </tr>\n        </thead>\n        <tbody>\n        {clientComms && clientComms.map(commObject => {\n          const time = moment(new Date(commObject.date * 1000)).format('MMM Do YYYY');\n          return (\n            <tr key={commObject.id}>\n              <td>\n                {time}\n              </td>\n              <td>\n                {commObject.note}\n              </td>\n              {editable && (\n                <td>\n                  <Tooltip\n                    placement=\"right\"\n                    mouseEnterDelay={0.5}\n                    mouseLeaveDelay={0.1}\n                    trigger=\"hover\"\n                    overlay={<div>Delete</div>}\n                  >\n                    <button onClick={() => onDeleteComm(commObject.id)} className=\"btn btn-secondary m-1\" type=\"submit\">\n                      <FontAwesomeIcon style={{ cursor: 'pointer' }} icon={faTrash}/>\n                    </button>\n                  </Tooltip>\n                </td>\n              )}\n            </tr>\n          );\n        })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Communications;\n","import React, { useMemo, useState } from 'react';\nimport BucketTable from './bucketTable';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash, faTrashRestore } from '@fortawesome/free-solid-svg-icons';\nimport Tooltip from 'rc-tooltip';\nimport 'rc-tooltip/assets/bootstrap.css';\nimport { useDispatch } from 'react-redux';\nimport * as clientActions from '../../store/actions/Clients';\n\nconst ReadOnlyBucket = ({ clientID, bucket, buttons }) => {\n  const [confirmModal, setConfirmModal] = useState(null);\n  const dispatch = useDispatch();\n\n  const data = useMemo(() => {\n    // Grab hoursData and format as array and output here.\n    const hoursDataFormatted = bucket.hours;\n\n    return hoursDataFormatted.map((month) => {\n      return (\n        {\n          month: month.month,\n          year: month.year,\n          invoice: month.invoice,\n          description: month.description,\n          in: month.in,\n          out: month.out,\n          remaining: month.remaining,\n          touched: month.touched,\n        }\n      );\n    });\n  }, [bucket.hours]);\n\n  const onDeleteBucket = async (bucket) => {\n    await dispatch(clientActions.deleteBucket(bucket));\n    console.log('Deleted bucket with name ' + bucket.name);\n  };\n\n  const onClickDelete = (bucketData) => {\n    const modal = (\n      <SweetAlert\n        danger\n        showCancel\n        confirmBtnText=\"Yes, delete it!\"\n        confirmBtnBsStyle=\"danger\"\n        title=\"Are you sure?\"\n        onConfirm={() => onDeleteBucket(bucketData)}\n        onCancel={() => setConfirmModal(null)}\n        focusCancelBtn={false}\n        focusConfirmBtn={false}\n      >\n        You will not be able to recover this bucket data!\n      </SweetAlert>\n    );\n    setConfirmModal(modal);\n  };\n\n  const onUnArchiveBucket = async (clientID, bucket) => {\n    await dispatch(clientActions.updateBucket(bucket, { archived: 0 }));\n    console.log('Unarchived bucket with name ' + bucket.name);\n  };\n\n  const onClickUnarchive = (clientID, bucketData) => {\n    const modal = (\n      <SweetAlert\n        success\n        showCancel\n        confirmBtnText=\"Yes, restore it!\"\n        confirmBtnBsStyle=\"success\"\n        title=\"Are you sure?\"\n        onConfirm={() => onUnArchiveBucket(clientID, bucketData)}\n        onCancel={() => setConfirmModal(null)}\n        focusCancelBtn={false}\n        focusConfirmBtn={false}\n      >\n        This will restore this bucket to the main page again.\n      </SweetAlert>\n    );\n    setConfirmModal(modal);\n  };\n\n  return (\n    <div>\n      <h5 className='ml-3'>{bucket.name}</h5>\n      <BucketTable data={data} readOnly={true}/>\n      {buttons && confirmModal}\n      {buttons && (\n        <div>\n          <Tooltip\n            placement=\"left\"\n            mouseEnterDelay={0.5}\n            mouseLeaveDelay={0.1}\n            trigger=\"hover\"\n            overlay={<div>Delete this bucket</div>}\n          >\n            <button onClick={() => onClickDelete(bucket)} className=\"btn btn-danger m-1\" type=\"submit\">\n              <FontAwesomeIcon style={{ cursor: 'pointer' }} icon={faTrash}/>\n            </button>\n          </Tooltip>\n          <Tooltip\n            placement=\"right\"\n            mouseEnterDelay={0.5}\n            mouseLeaveDelay={0.1}\n            trigger=\"hover\"\n            overlay={<div>Restore this bucket</div>}\n          >\n            <button onClick={() => onClickUnarchive(clientID, bucket)} className=\"btn btn-success m-1\" type=\"submit\">\n              <FontAwesomeIcon style={{ cursor: 'pointer' }} icon={faTrashRestore}/>\n            </button>\n          </Tooltip>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ReadOnlyBucket;\n","import React from 'react';\nimport ReadOnlyBucket from './ReadOnlyBucket';\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Tooltip from 'rc-tooltip/es';\n\nconst ArchivePage = ({ buckets, onBackToClientPage, clientID, restorable }) => {\n  // TODO filter out non archived buckets here.\n  return (\n    <div>\n      <h2>This is the archive page</h2>\n      <div className=\"col-8\">\n        {buckets && buckets.map(bucket => {\n          if (bucket.archived === 1) {\n            return (\n              <div key={bucket.bucketID} className=\"singlebucket\">\n                <ReadOnlyBucket bucket={bucket} clientID={clientID} buttons={restorable}/>\n                <hr/>\n              </div>\n            );\n          }\n\n          return null;\n        })}\n      </div>\n      <Tooltip\n        placement=\"right\"\n        mouseEnterDelay={0.5}\n        mouseLeaveDelay={0.1}\n        trigger=\"hover\"\n        overlay={<div>Back to client page</div>}\n      >\n        <button onClick={onBackToClientPage} className=\"btn btn-success m-1\" type=\"submit\">\n          <FontAwesomeIcon style={{ cursor: 'pointer' }} icon={faArrowLeft}/>\n        </button>\n      </Tooltip>\n    </div>\n  );\n};\n\nexport default ArchivePage;\n","import React from 'react';\nimport Tooltip from 'rc-tooltip/es';\n\nconst OwnerDisplay = ({ owner }) => {\n  if (owner) {\n    return (\n      <Tooltip\n        placement=\"top\"\n        mouseEnterDelay={0.5}\n        mouseLeaveDelay={0.1}\n        trigger=\"hover\"\n        overlay={<div>Owner</div>}\n      >\n        <div className=\"float-right bg-success p-2 rounded ownerbutton\">\n          <em>{owner.username}</em>\n        </div>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <Tooltip\n      placement=\"top\"\n      mouseEnterDelay={0.5}\n      mouseLeaveDelay={0.1}\n      trigger=\"hover\"\n      overlay={<div>Owner</div>}\n    >\n      <div className=\"float-right bg-success p-2 rounded ownerbutton\">\n        <em>No owner</em>\n      </div>\n    </Tooltip>\n  );\n};\n\nexport default OwnerDisplay;\n","import React, { useEffect, useRef, useState } from 'react';\nimport AddBucketForm from './AddBucketForm';\nimport EditClientForm from './EditClientForm';\nimport Bucket from './Bucket';\nimport MonthlySupportHours from './MonthlySupportHours';\nimport Communications from './Communications';\nimport ArchivePage from './ArchivePage';\nimport * as ROUTES from '../../constants/routes';\nimport { useHistory } from 'react-router-dom';\nimport OwnerDisplay from './OwnerDisplay';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as clientActions from '../../store/actions/Clients';\nimport {BallTriangle} from \"react-loader-spinner\";\nimport {removeActiveClient} from \"../../store/actions/Clients\";\n\nconst SingleClientPage = ({ clientID }) => {\n  const [addingNewBucket, setAddingNewBucket] = useState(false);\n  const [editingClient, setEditingClient] = useState(false);\n  const [viewingArchive, setViewingArchive] = useState(false);\n  const _isMounted = useRef(true); // Initial value _isMounted = true\n  const activeClient = useSelector(state => state.clients.activeClient);\n  const [clientNote, setClientNote] = useState('');\n  const dispatch = useDispatch();\n  useEffect(() => {\n    // Got to reset some state when switching clients.\n    dispatch(clientActions.removeActiveClient());\n    setAddingNewBucket(false);\n    setEditingClient(false);\n    setViewingArchive(false);\n    dispatch(clientActions.fetchClient(clientID));\n  }, [clientID, dispatch]);\n\n  // Need this to do a componentwillunmount and cleanup memory leaks.\n  useEffect(() => {\n    // ComponentWillUnmount in Class Component\n    return () => {\n      _isMounted.current = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    if (activeClient.note !== null) {\n      setClientNote(activeClient.note);\n    } else {\n      setClientNote('');\n    }\n  }, [activeClient]);\n\n  const onCreateBucket = () => {\n    setAddingNewBucket(true);\n  };\n\n  const onEditClient = () => {\n    setEditingClient(true);\n  };\n\n  const onViewArchive = () => {\n    setViewingArchive(true);\n  };\n\n  const onEditClientNote = e => {\n    setClientNote(e.target.value);\n  };\n\n  const updateClientNote = e => {\n    // Only update with a request if the note actually changed.\n    if (activeClient.note === clientNote) {\n      console.log('no change to client note, not updating');\n      return;\n    }\n\n    dispatch(clientActions.updateClient(clientID, { note: clientNote }));\n  };\n\n  const onBackToClientPage = () => {\n    setAddingNewBucket(false);\n    setEditingClient(false);\n    setViewingArchive(false);\n  };\n\n  const onDeleteClient = async () => {\n    await dispatch(clientActions.deleteClient(clientID));\n    await dispatch(removeActiveClient());\n    await dispatch(clientActions.fetchClients());\n  };\n\n  const history = useHistory();\n  const onViewClient = () => {\n    history.push(ROUTES.CLIENTS + '/' + clientID);\n  };\n\n  const onArchiveBucket = async (bucket) => {\n    await dispatch(clientActions.updateBucket(bucket, { archived: 1 }));\n  };\n\n  const onRemoveMonth = async (hours) => {\n    await dispatch(clientActions.deleteMonth(hours));\n  };\n\n  const onAddMonth = async (bucket, newMonth) => {\n    // If the month already exists, it will add the previous month instead.\n    await dispatch(clientActions.createMonth(bucket, newMonth));\n  };\n\n  const handleOnUpdateHoursData = (hoursid, column, value) => {\n    dispatch(clientActions.updateHoursData(hoursid, column, value));\n  };\n\n  const onClickMarkPrepaid = async (bucket) => {\n    let prepaid = 0;\n    if (bucket.prepaid === 0) {\n      prepaid = 1;\n    }\n\n    await dispatch(clientActions.updateBucket(bucket, { prepaid: prepaid }));\n  };\n\n  const handleUpdateBucketName = async (bucket, data) => {\n    await dispatch(clientActions.updateBucket(bucket, data));\n    console.log('bucket updated to have name ' + data.name);\n  };\n  // Do not start rendering if we can't find the activeClient yet. Still being fetched.\n  if (Object.keys(activeClient).length === 0 && activeClient.constructor === Object) {\n    return <BallTriangle height={100} width={100} radius={5} color=\"#4fa94d\" ariaLabel=\"ball-triangle-loading\" wrapperClass=\"\" wrapperStyle=\"\" visible={true}/>;\n  }\n\n  if (addingNewBucket) {\n    return (\n      <div>\n        <AddBucketForm clientID={clientID} onFinishSubmission={onBackToClientPage}/>\n      </div>\n    );\n  }\n\n  if (editingClient) {\n    return (\n      <div>\n        <EditClientForm onDeleteClient={onDeleteClient} clientData={activeClient}\n                        onFinishSubmission={onBackToClientPage} owner={activeClient.owner}/>\n      </div>\n    );\n  }\n\n  if (viewingArchive) {\n    return (\n      <ArchivePage buckets={activeClient.buckets} onBackToClientPage={onBackToClientPage} clientID={clientID}\n                   restorable={true}/>\n    );\n  }\n\n  return (\n    <div>\n      <div className=\"float-right\" style={{width: '200px'}}>\n        <button onClick={onViewArchive} className=\"btn btn-warning m-1\" type=\"submit\">View Bucket Archive</button>\n        <button onClick={onCreateBucket} className=\"btn btn-primary m-1\" type=\"submit\">Create a bucket</button>\n        <button onClick={onEditClient} className=\"btn btn-secondary m-1\" type=\"submit\">Edit Client</button>\n        <button onClick={onViewClient} className=\"btn btn-warning m-1\" type=\"submit\">To Client Page</button>\n      </div>\n      <div className=\"card mt-3 mb-3\">\n        <div className=\"card-header\">\n          <h1>\n            {activeClient.name}\n            <OwnerDisplay owner={activeClient.owner}/>\n          </h1>\n          {Object.keys(activeClient).length !== 0 && <div className=\"float-left\"><i>Last updated\n            by {activeClient.lastupdated.username} - {activeClient.lastupdated.date}</i></div>}\n        </div>\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">\n            <MonthlySupportHours activeClient={activeClient}/>\n          </h5>\n        </div>\n      </div>\n      <div>\n                <textarea\n                  className=\"form-control\"\n                  onChange={onEditClientNote}\n                  onBlur={updateClientNote}\n                  value={clientNote}\n                  placeholder=\"Notes\"\n                  style={{ height: '7rem', width: '50rem' }}\n                  autoCorrect=\"off\"\n                  autoCapitalize=\"off\"\n                  spellCheck=\"false\"\n                />\n      </div>\n      <hr/>\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-8\">\n            {activeClient.buckets.map(bucket => {\n              if (bucket.archived === 0) {\n                return (\n                  <div key={bucket.id} className=\"singlebucket\">\n                    <Bucket\n                      bucket={bucket}\n                      onArchiveBucket={onArchiveBucket}\n                      onRemoveMonth={onRemoveMonth}\n                      onAddMonth={onAddMonth}\n                      handleOnUpdateHoursData={handleOnUpdateHoursData}\n                      onClickMarkPrepaid={onClickMarkPrepaid}\n                      handleUpdateBucketName={handleUpdateBucketName}\n                    />\n                    <hr/>\n                  </div>\n                );\n              }\n\n              return null;\n            })}\n          </div>\n          <div className=\"col-4\">\n            <Communications clientID={clientID} clientComms={activeClient.communication} editable={true}/>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SingleClientPage;\n","import React from 'react';\n\nconst ClientBlankPage = ({ type }) => {\n  return (\n    <div>\n      <h1>No client selected</h1>\n      <h4>Please select a client on the left to {type} month by month hours data.</h4>\n    </div>\n  );\n};\n\nexport default ClientBlankPage;\n","import React, { useEffect, useState } from 'react';\nimport Sidebar from '../Navigation/sidebar';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport * as ROUTES from '../../constants/routes';\nimport NewClientForm from './NewClientPage';\nimport SingleClientPage from './SingleClientPage';\nimport ClientBlankPage from './ClientBlankPage';\nimport * as clientActions from '../../store/actions/Clients';\nimport * as authActions from '../../store/actions/Auth';\nimport { useDispatch, useSelector } from 'react-redux';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport { useHistory } from 'react-router-dom';\n\nconst ClientPage = () => {\n  const [confirmModal, setConfirmModal] = useState(null);\n  const [confirmed, setConfirmed] = useState(false);\n  const dispatch = useDispatch();\n  const currentUser = useSelector(state => state.auth.currentUser);\n  const activeClient = useSelector(state => state.clients.activeClient);\n  const history = useHistory();\n  const clientIDinurl = window.location.pathname.split(ROUTES.CLIENTADMIN + '/').pop();\n  let newClient = false;\n  let noClient = false;\n  if (window.location.pathname === ROUTES.CLIENTADMIN + ROUTES.NEW) {\n    newClient = true;\n  }\n\n  if (window.location.pathname === ROUTES.CLIENTADMIN) {\n    noClient = true;\n  }\n\n  useEffect(() => {\n    // Should only be fetching if we are signed in properly.\n    if (currentUser) {\n      dispatch(clientActions.fetchClients());\n      dispatch(authActions.fetchUsers());\n    }\n  }, [dispatch, currentUser, activeClient]);\n\n  const onConfirmEditOtherOwnersClient = () => {\n    console.log('confirmed to edit this client, log this?');\n    setConfirmed(true);\n    setConfirmModal(null);\n  };\n\n  const goToReadOnlyPage = () => {\n    setConfirmModal(null);\n    history.push(ROUTES.CLIENTS + '/' + activeClient.id);\n  };\n\n  const modal = (\n    <SweetAlert\n      warning\n      showCancel\n      confirmBtnText=\"Client read only page\"\n      confirmBtnBsStyle=\"warning\"\n      cancelBtnText=\"Yes, I want to edit\"\n      title=\"Are you sure?\"\n      onCancel={() => onConfirmEditOtherOwnersClient()}\n      onConfirm={() => goToReadOnlyPage()}\n      focusCancelBtn={false}\n      focusConfirmBtn={false}\n    >\n      You are not the owner of this client. Do you want to edit the data anyway?\n    </SweetAlert>\n  );\n\n  // First check that we have a currentUser set and an activeclient.\n  if (noClient === false && confirmed === false && confirmModal === null && currentUser && Object.keys(activeClient).length !== 0) {\n    if (activeClient.ownerid !== currentUser.id && activeClient.ownerid !== null) {\n      setConfirmModal(modal);\n    }\n  }\n\n  return (\n    <div>\n      {confirmModal}\n      <Container fluid>\n        <Row className=\"mainRow\">\n          <Col xs={5} md={2} sm={3} id=\"sidebar-wrapper\">\n            <Sidebar/>\n          </Col>\n          <Col style={{overflow: 'scroll', minWidth: '1100px'}} xs={5} md={10} sm={9} >\n            {noClient && <ClientBlankPage type={'enter'}/>}\n            {newClient && <NewClientForm/>}\n            {!newClient && !noClient && <SingleClientPage clientID={clientIDinurl}/>}\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default ClientPage;\n","import React, { useEffect, useRef, useState } from 'react';\nimport MonthlySupportHours from './MonthlySupportHours';\nimport Communications from './Communications';\nimport ArchivePage from './ArchivePage';\nimport ReadOnlyBucket from './ReadOnlyBucket';\nimport { useHistory } from 'react-router-dom';\nimport * as ROUTES from '../../constants/routes';\nimport OwnerDisplay from './OwnerDisplay';\nimport * as clientActions from '../../store/actions/Clients';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {BallTriangle} from \"react-loader-spinner\";\n\n// Display all the client information in a non editable way.\nconst SingleClientReadOnlyPage = ({ clientID }) => {\n  const [viewingArchive, setViewingArchive] = useState(false);\n  const _isMounted = useRef(true); // Initial value _isMounted = true\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const activeClient = useSelector(state => state.clients.activeClient);\n  const currentUser = useSelector(state => state.auth.currentUser);\n\n  useEffect(() => {\n    // Got to reset some state when switching clients.\n    setViewingArchive(false);\n  }, [clientID]);\n\n  // Need this to do a componentwillunmount and cleanup memory leaks.\n  useEffect(() => {\n    // ComponentWillUnmount in Class Component\n    return () => {\n      _isMounted.current = false;\n    };\n  }, []);\n  useEffect(() => {\n    dispatch(clientActions.removeActiveClient());\n    dispatch(clientActions.fetchClient(clientID));\n  }, [clientID, dispatch]);\n\n  const onViewArchive = () => {\n    setViewingArchive(true);\n  };\n\n  const onBackToClientPage = () => {\n    setViewingArchive(false);\n  };\n\n  if (viewingArchive) {\n    return (\n      <ArchivePage buckets={activeClient.buckets} onBackToClientPage={onBackToClientPage} clientID={clientID} restorable={false}/>\n    );\n  }\n\n  const onViewClientReport = () => {\n    history.push(ROUTES.REPORT + '/' + clientID);\n  };\n\n  const onViewClientAdmin = () => {\n    history.push(ROUTES.CLIENTADMIN + '/' + clientID);\n  };\n\n  const ToAdminPage = () => {\n    return <button onClick={onViewClientAdmin} className=\"btn btn-danger m-1 float-right\" type=\"submit\">To Client\n      Admin</button>;\n  };\n\n  if (Object.keys(activeClient).length === 0 && activeClient.constructor === Object) {\n    return <BallTriangle height={100} width={100} radius={5} color=\"#4fa94d\" ariaLabel=\"ball-triangle-loading\" wrapperClass=\"\" wrapperStyle=\"\" visible={true}/>;\n  }\n\n  return (\n    <div>\n      <div className=\"float-right\" style={{width: '200px'}}>\n        <button onClick={onViewArchive} className=\"btn btn-warning m-1 float-right\" type=\"submit\">View Bucket Archive</button>\n        <button onClick={onViewClientReport} className=\"btn btn-warning m-1 float-right\" type=\"submit\">To Report</button>\n        {currentUser.role === 3 && <ToAdminPage/>}\n      </div>\n      <div className=\"card mt-3\">\n        <div className=\"card-header\">\n          <h1>\n            {activeClient.name}\n            <OwnerDisplay owner={activeClient.owner}/>\n          </h1>\n          {Object.keys(activeClient).length !== 0 && <div className=\"float-left\"><i>Last updated\n            by {activeClient.lastupdated.username} - {activeClient.lastupdated.date}</i></div>}\n        </div>\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">\n            <MonthlySupportHours activeClient={activeClient}/>\n          </h5>\n          <div>\n            {activeClient.note}\n          </div>\n        </div>\n      </div>\n      <hr/>\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-8\">\n            {activeClient.buckets && activeClient.buckets.map(bucket => {\n              if (bucket.archived === 0) {\n                return (\n                    <div key={bucket.id} className=\"singlebucket\">\n                      <ReadOnlyBucket clientID={clientID} bucket={bucket} buttons={false}/>\n                      <hr/>\n                    </div>\n                );\n              }\n              return null;\n            })}\n          </div>\n          <div className=\"col-4\">\n            <Communications clientID={clientID} clientComms={activeClient.communication} editable={false}/>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SingleClientReadOnlyPage;\n","import React, { useEffect } from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport Sidebar from '../Navigation/sidebar';\nimport ClientBlankPage from './ClientBlankPage';\nimport * as ROUTES from '../../constants/routes';\nimport SingleClientReadOnlyPage from './SingleClientReadOnlyPage';\nimport { useDispatch } from 'react-redux';\nimport * as clientActions from '../../store/actions/Clients';\nimport * as authActions from '../../store/actions/Auth';\n\n// Display all the client information in a non editable way.\nconst ClientReadOnlyPage = () => {\n  const dispatch = useDispatch();\n  const clientIDinurl = window.location.pathname.split(ROUTES.CLIENTS + '/').pop();\n  let noClient = false;\n  if (window.location.pathname === ROUTES.CLIENTS) {\n    noClient = true;\n  }\n\n  useEffect(() => {\n    dispatch(clientActions.fetchClients());\n    dispatch(authActions.fetchUsers());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Container fluid>\n        <Row className=\"mainRow\">\n          <Col xs={5} md={2} sm={3} id=\"sidebar-wrapper\">\n            <Sidebar/>\n          </Col>\n          <Col style={{overflow: 'scroll', minWidth: '1100px'}} xs={5} md={10} sm={9} >\n            {noClient && <ClientBlankPage type={'view'}/>}\n            {!noClient && <SingleClientReadOnlyPage clientID={clientIDinurl}/>}\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default ClientReadOnlyPage;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport * as ROUTES from '../../constants/routes';\n\nconst PageNotFound = () => (\n  <div className=\"justify-content-center text-center\">\n    <div className=\"row pt-5 mt-5 d-flex justify-content-center\">\n    </div>\n    <Link className=\"btn mt-5 btn-primary text-center\" to={ROUTES.LANDING}>\n      Go to dashboard\n    </Link>\n  </div>\n);\nexport default PageNotFound;\n","import React from 'react';\n\nconst ReportBlankPage = () => {\n  return (\n    <div>\n      <h1>No client selected</h1>\n      <h4>Please select a client on the left to view reports.</h4>\n    </div>\n  );\n};\n\nexport default ReportBlankPage;\n","import React from 'react';\nimport { VictoryLabel, VictoryPie } from 'victory';\n\nconst ReportPieChart = ({ chartData, clientName }) => {\n  let formattedChartData = [];\n  for (const key in chartData) {\n    if (chartData.hasOwnProperty(key)) {\n      formattedChartData.push({ x: chartData[key], y: chartData[key], label: key + ': ' + chartData[key] });\n    }\n  }\n\n  return (\n    <div>\n      <svg viewBox=\"0 0 400 400\" style={{ overflow: 'visible' }}>\n        <VictoryPie\n          standalone={false}\n          width={400} height={400}\n          data={formattedChartData}\n          innerRadius={68} labelRadius={170}\n          colorScale=\"qualitative\"\n        />\n        <VictoryLabel\n          textAnchor=\"middle\"\n          style={{ fontSize: 20 }}\n          x={200} y={200}\n          text={clientName}\n        />\n      </svg>\n    </div>\n  );\n};\n\nexport default ReportPieChart;\n","import React, { useEffect, useRef } from 'react';\nimport uuid from 'react-uuid';\nimport ReportPieChart from './ReportPieChart';\nimport MonthlySupportHours from './MonthlySupportHours';\nimport { useHistory } from 'react-router-dom';\nimport * as ROUTES from '../../constants/routes';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as clientActions from '../../store/actions/Clients';\n\nconst SingleReportPage = ({ clientID }) => {\n  const _isMounted = useRef(true); // Initial value _isMounted = true\n  const activeClient = useSelector(state => state.clients.activeClient);\n  const dispatch = useDispatch();\n\n  // Need this to do a componentwillunmount and cleanup memory leaks.\n  useEffect(() => {\n    // ComponentWillUnmount in Class Component\n    return () => {\n      _isMounted.current = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    dispatch(clientActions.fetchClient(clientID));\n  }, [clientID, dispatch]);\n\n  let total = 0;\n  let chartData = {};\n  const history = useHistory();\n  const onViewClient = () => {\n    history.push(ROUTES.CLIENTS + '/' + clientID);\n  };\n\n  return (\n    <div>\n      <button onClick={onViewClient} className=\"btn btn-warning m-1 float-right\" type=\"submit\">To Client Page</button>\n      <h1>{activeClient.name} Report</h1>\n      <MonthlySupportHours activeClient={activeClient}/>\n      <table className=\"table\">\n        <thead className=\"theat-dark\">\n        <tr>\n          <th scope=\"col\">Bucket Name</th>\n          <th scope=\"col\">Total Remaining hours</th>\n        </tr>\n        </thead>\n        <tbody>\n        {activeClient.buckets && activeClient.buckets.map(bucket => {\n          if (bucket.archived === 1) {\n            return null; // No reports on archived buckets.\n          }\n          let remainingCurrent = 0;\n          const hoursarraylength = bucket.hours.length;\n          if (hoursarraylength > 0) {\n            remainingCurrent = bucket.hours[hoursarraylength - 1].remaining;\n          }\n\n          total = total + remainingCurrent;\n          chartData[bucket.name] = remainingCurrent;\n          return (\n            <tr key={bucket.id}>\n              <td>{bucket.name}</td>\n              <td>{remainingCurrent}</td>\n            </tr>\n          );\n        })}\n        <tr className=\"theat-dark\" key={uuid()}>\n          <th>Total</th>\n          <th>{total}</th>\n        </tr>\n        </tbody>\n      </table>\n      <div className=\"w-25\" style={{ marginLeft: 300 }}>\n        <ReportPieChart chartData={chartData} clientName={activeClient.name}/>\n      </div>\n    </div>\n  );\n};\n\nexport default SingleReportPage;\n","import React, { useEffect, useRef } from 'react';\nimport Sidebar from '../Navigation/sidebar';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport * as ROUTES from '../../constants/routes';\nimport ReportBlankPage from './ReportBlankPage';\nimport SingleReportPage from './SingleReportPage';\nimport * as clientActions from '../../store/actions/Clients';\nimport * as authActions from '../../store/actions/Auth';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst ReportPage = () => {\n  const dispatch = useDispatch();\n  const currentUser = useSelector(state => state.auth.currentUser);\n  const clientIDinurl = window.location.pathname.split(ROUTES.REPORT + '/').pop();\n  const _isMounted = useRef(true); // Initial value _isMounted = true\n  let noClientSelected = false;\n  if (window.location.pathname === ROUTES.REPORT) {\n    noClientSelected = true;\n  }\n\n  useEffect(() => {\n    // Should only be fetching if we are signed in properly.\n    if (currentUser) {\n      dispatch(clientActions.fetchClients());\n      dispatch(authActions.fetchUsers());\n    }\n  }, [dispatch, currentUser]);\n\n  // Need this to do a componentwillunmount and cleanup memory leaks.\n  useEffect(() => {\n    // ComponentWillUnmount in Class Component\n    return () => {\n      _isMounted.current = false;\n    };\n  }, []);\n  return (\n    <div>\n      <Container fluid>\n        <Row>\n          <Col xs={2} id=\"sidebar-wrapper\">\n            <Sidebar/>\n          </Col>\n          <Col xs={10}>\n            {noClientSelected && <ReportBlankPage/>}\n            {!noClientSelected && <SingleReportPage clientID={clientIDinurl}/>}\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default (ReportPage);\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Container } from 'react-bootstrap';\nimport moment from 'moment';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as clientActions from '../../store/actions/Clients';\nimport * as authActions from '../../store/actions/Auth';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\n\n// This page should show the buckets that have had hours go out in the last 3 months.\nconst SummaryPage = () => {\n  const dispatch = useDispatch();\n  const _isMounted = useRef(true); // Initial value _isMounted = true\n  const [lastthreemonths, setLastthreemonths] = useState([]);\n  const clientData = useSelector(state => state.clients.clientSummaryData);\n  const adminUsers = useSelector(state => state.auth.adminUsers);\n  const currentUser = useSelector(state => state.auth.currentUser);\n\n  useEffect(() => {\n    const currentMonth = moment(new Date()).endOf('month');\n    const thisMonth = currentMonth.format('MMM YYYY');\n    const lastMonth = currentMonth.subtract(1, 'months').format('MMM YYYY');\n    const twomonthsago = currentMonth.subtract(1, 'months').format('MMM YYYY');\n    const lastthreemonthsarray = [\n      twomonthsago,\n      lastMonth,\n      thisMonth,\n    ];\n    setLastthreemonths(lastthreemonthsarray);\n    // ComponentWillUnmount in Class Component\n    return () => {\n      _isMounted.current = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    // Should only be fetching if we are signed in properly.\n    if (currentUser) {\n      dispatch(clientActions.fetchClientSummary());\n      dispatch(authActions.fetchUsers());\n    }\n  }, [dispatch, currentUser]);\n\n  const SummaryPageInfo = () => {\n    return (\n      <div className=\"m-4\">\n        <h3>What is this?</h3>\n        <p>This summary page shows buckets that fit the following criteria:</p>\n        <ul>\n          <li>The bucket is marked as prepaid: <button className=\"btn btn-success m-1\" type=\"submit\">\n            <FontAwesomeIcon icon={faCheck}/>\n          </button></li>\n          <li>The bucket has hours <u>out</u> in the last 3 months</li>\n          <li>The bucket is not archived</li>\n        </ul>\n      </div>\n    );\n  }\n\n  if (clientData.length === 0) {\n    return (\n      <div>\n        <SummaryPageInfo/>\n        <hr/>\n        <div className=\"m-4\">\n          No buckets found matching the summary criteria.\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <SummaryPageInfo/>\n      <Container fluid>\n        <table className=\"table\">\n          <thead className=\"theat-dark\">\n          <tr>\n            <th scope=\"col\">Client</th>\n            <th scope=\"col\">Owner</th>\n            <th scope=\"col\">Bucket</th>\n            {lastthreemonths.map(month => {\n              return <th key={month} scope=\"col\">{month}</th>;\n            })}\n          </tr>\n          </thead>\n          {clientData.map(client => {\n            const bucketRender = client.buckets.map(bucket => {\n              return (\n                <tr key={bucket.id}>\n                  <td>{bucket.name}</td>\n                  {bucket.hours.map(hours => {\n                    return (\n                      <td key={hours.id}>{hours.out}</td>\n                    );\n                  })}\n                </tr>\n              );\n            });\n\n            let user = 'No owner';\n            const founduser = adminUsers.find(user => user.id === client.ownerid);\n            if (founduser !== undefined) {\n              user = founduser.username;\n            }\n\n            return (\n              <tbody key={client.id}>\n              <tr key={client.id}>\n                <th rowSpan=\"0\">{client.name}</th>\n                <th rowSpan=\"0\">{user}</th>\n              </tr>\n              {bucketRender}\n              </tbody>\n            );\n          })}\n        </table>\n      </Container>\n    </div>\n  );\n};\n\nexport default (SummaryPage);\n","import React, { useEffect, useMemo, useRef } from 'react';\nimport { Container } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as clientActions from '../../store/actions/Clients';\nimport * as authActions from '../../store/actions/Auth';\nimport { useSortBy, useTable } from 'react-table';\n\nconst OwnerPage = () => {\n  const _isMounted = useRef(true); // Initial value _isMounted = true\n  const clients = useSelector(state => state.clients.clients);\n  const adminUsers = useSelector(state => state.auth.adminUsers);\n  const dispatch = useDispatch();\n\n  // Need this to do a componentwillunmount and cleanup memory leaks.\n  useEffect(() => {\n    // ComponentWillUnmount in Class Component\n    return () => {\n      _isMounted.current = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    dispatch(clientActions.fetchClients());\n    dispatch(authActions.fetchUsers());\n  }, [dispatch]);\n\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Client',\n        accessor: 'client',\n      },\n      {\n        Header: 'Owner',\n        accessor: 'owner',\n      },\n    ],\n    []\n  );\n  // Makes the sorting consistent.\n  const capitalizeFirstLetter = (uncapitalString) => uncapitalString.charAt(0).toUpperCase() + uncapitalString.slice(1);\n  const data = useMemo(() => {\n    // Grab data and format as array and output here.\n    return clients.map((client) => {\n      const owner = adminUsers.filter(user => user.id === client.ownerid);\n      let ownername = 'No owner';\n      if (Object.keys(owner).length > 0) {\n        ownername = owner[0].username;\n      }\n\n      return (\n        {\n          client: capitalizeFirstLetter(client.name),\n          owner: capitalizeFirstLetter(ownername),\n        }\n      );\n    });\n  }, [clients, adminUsers]);\n\n  // Create a non editable cell renderer\n  const NonEditableCell = ({ cell }) => {\n    if (!cell.value) {\n      return null;\n    }\n\n    return cell.value;\n  };\n  // Set our editable cell renderer as the default Cell renderer\n  const defaultColumn = {\n    Cell: NonEditableCell,\n  };\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n    },\n    useSortBy\n  );\n\n  if (clients.length === 0 || adminUsers.length === 0) {\n    return (\n      <div>\n        Loading client owners page\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <Container fluid>\n        <table {...getTableProps()} className=\"table w-50\">\n          <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  {column.render('Header')}\n                  <span>\n                                        {column.isSorted\n                                          ? column.isSortedDesc\n                                            ? ' ⬇️'\n                                            : ' ⬆️'\n                                          : ''}\n                                      </span>\n                </th>\n\n              ))}\n            </tr>\n          ))}\n          </thead>\n          <tbody {...getTableBodyProps()}>\n          {rows.map(row => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n          </tbody>\n        </table>\n      </Container>\n    </div>\n  );\n};\n\nexport default OwnerPage;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Navigation from '../Navigation';\nimport LandingPage from '../Landing';\nimport SignUpPage from '../SignUp';\nimport SignInPage from '../SignIn';\nimport AccountPage from '../Account';\nimport AdminPage from '../Admin';\nimport LogsPage from '../Admin/LogsPage';\nimport * as ROUTES from '../../constants/routes';\nimport ClientPage from './ClientPage';\nimport ClientReadOnlyPage from './ClientReadOnlyPage';\nimport PageNotFound from '../Error';\nimport ReportPage from './ReportPage';\nimport SummaryPage from './SummaryPage';\nimport OwnerPage from './OwnerPage';\n\nconst App = () => (\n  <Router>\n    <div>\n      <Navigation/>\n      <Switch style={{minWidth: '900px', overflow: 'scroll'}}>\n        <Route exact path={ROUTES.LANDING} component={LandingPage}/>\n        <Route path={ROUTES.SIGN_UP} component={SignUpPage}/>\n        <Route path={ROUTES.SIGN_IN} component={SignInPage}/>\n        <Route exact path={ROUTES.CLIENTADMIN + ROUTES.NEW} component={ClientPage}/>\n        <Route path={ROUTES.CLIENTADMIN} component={ClientPage}/>\n        <Route path={ROUTES.CLIENTS} component={ClientReadOnlyPage}/>\n        <Route path={ROUTES.REPORT} component={ReportPage}/>\n        <Route path={ROUTES.SUMMARY} component={SummaryPage}/>\n        <Route path={ROUTES.OWNERS} component={OwnerPage}/>\n        <Route path={ROUTES.ACCOUNT} component={AccountPage}/>\n        <Route path={ROUTES.ADMIN} component={AdminPage}/>\n        <Route path={ROUTES.LOGS} component={LogsPage}/>\n        <Route component={PageNotFound}/>\n      </Switch>\n    </div>\n  </Router>\n);\nexport default (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SET_USERDATA, SIGNED_IN, SIGNED_OUT } from '../actions/Auth';\n\nconst localdata = JSON.parse(localStorage.getItem('authUser'));\nlet user = [];\nif (localdata) {\n  user = localdata;\n}\n\nconst initialState = {\n  users: [],\n  adminUsers: [],\n  currentUser: user,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USERDATA:\n      // Add the adminUsers also to a second object for easy querying.\n      const admins = action.users.filter((user) => user.role === 3);\n      return {\n        ...state,\n        users: action.users,\n        adminUsers: admins,\n      };\n    case SIGNED_IN:\n      // We just signed in so store our token in local storage and in redux state.\n      const currentuser = action.data.authUser;\n      localStorage.setItem('authUser', JSON.stringify(currentuser));\n      return {\n        ...state,\n        currentUser: currentuser,\n      };\n    case SIGNED_OUT:\n      // We just signed out so delete our token in local storage and in redux state.\n      localStorage.removeItem('authUser');\n      return {\n        ...state,\n        currentUser: [],\n      };\n    default:\n      return state;\n  }\n};\n","import {FETCH_CLIENT, REMOVE_CLIENT, RESET_CLIENTDATA, SET_CLIENT_SUMMARY_DATA, SET_CLIENTDATA} from '../actions/Clients';\n\nconst initialState = {\n  clients: [],\n  activeClient: {},\n  clientSummaryData: [],\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_CLIENTDATA:\n      return {\n        ...state,\n        clients: action.clients,\n      };\n    case SET_CLIENT_SUMMARY_DATA:\n      return {\n        ...state,\n        clientSummaryData: action.clients,\n      };\n    case FETCH_CLIENT:\n      return {\n        ...state,\n        activeClient: action.activeClient,\n      };\n    case REMOVE_CLIENT:\n      return {\n      ...state,\n      activeClient: {},\n    };\n    case RESET_CLIENTDATA:\n      return initialState;\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\nimport './bootstrap-overrides.scss';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport authReducer from './store/reducers/Auth';\nimport clientsReducer from './store/reducers/Clients';\n\nconst rootReducer = combineReducers({\n  auth: authReducer,\n  clients: clientsReducer,\n});\nconst store = createStore(rootReducer, applyMiddleware(ReduxThunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const LANDING = '/';\nexport const SIGN_UP = '/signup';\nexport const SIGN_IN = '/signin';\nexport const CLIENTS = '/clients';\nexport const CLIENTADMIN = '/clientadmin';\nexport const REPORT = '/report';\nexport const SUMMARY = '/summary';\nexport const OWNERS = '/owners';\nexport const NEW = '/new';\nexport const ACCOUNT = '/account';\nexport const ADMIN = '/admin';\nexport const LOGS = '/logs';\nexport const PASSWORD_FORGET = '/pw-forget';\n"],"sourceRoot":""}